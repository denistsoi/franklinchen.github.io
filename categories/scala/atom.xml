<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Franklin Chen</title>
    <link>http://franklinchen.com/categories/scala/atom/index.xml</link>
    <description>Recent content in Scala on Franklin Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://franklinchen.com/categories/scala/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pittsburgh Scala meetup: Introduction to Actors Systems</title>
      <link>http://franklinchen.com/blog/2013/06/18/pittsburgh-scala-meetup-introduction-to-actors-systems/</link>
      <pubDate>Tue, 18 Jun 2013 23:10:20 -0400</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/06/18/pittsburgh-scala-meetup-introduction-to-actors-systems/</guid>
      <description>&lt;p&gt;Josh Suereth spoke again at the latest &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt; &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/123884682/&#34;&gt;event&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He gave an introduction to actors using &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;. I&amp;rsquo;d attended a version of his introductory talk over a year ago, actually, when he gave it at the &lt;a href=&#34;../../blog/2012/06/09/report-on-the-first-pittsburgh-techfest-2012/&#34;&gt;first Pittsburgh TechFest&lt;/a&gt;, so it was basically review for me.&lt;/p&gt;

&lt;p&gt;However, the discussion during the presentation and afterwards was what the meetup was really about, and I found that really useful.&lt;/p&gt;

&lt;p&gt;Sadly, I still have not yet written a real actor-based software system yet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Tech Fest 2013: my talk &#34;Stop Overusing Regular Expressions!&#34;</title>
      <link>http://franklinchen.com/blog/2013/06/01/pittsburgh-tech-fest-2013-my-talk-stop-overusing-regular-expressions/</link>
      <pubDate>Sat, 01 Jun 2013 23:48:22 -0400</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/06/01/pittsburgh-tech-fest-2013-my-talk-stop-overusing-regular-expressions/</guid>
      <description>&lt;p&gt;At Pittsburgh TechFest 2013 (&lt;a href=&#34;../../blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/&#34;&gt;full report here&lt;/a&gt;), I gave a talk for a one-hour time slot before lunch.&lt;/p&gt;

&lt;p&gt;This was &lt;a href=&#34;../../blog/2013/01/18/how-justice-clarence-thomas-uncovered-a-seven-year-old-bug-in-my-computer-program/&#34;&gt;my first talk at a conference in three years&lt;/a&gt;, and only my second at a conference in my life! I feel that I have much improved as a presenter since then.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it went.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;My presentation was &amp;ldquo;Stop overusing regular expressions!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Here is my abstract as submitted to Pittsburgh TechFest:
&lt;blockquote&gt;
Regular expressions are very commonly used to process and validate text data. Unfortunately, they suffer from various limitations. I will discuss the limitations and illustrate how using grammars instead can be an improvement. I will make the examples concrete using parsing libraries in a couple of representative languages, although the ideas are language-independent. (I&amp;rsquo;ll try to squeeze in, say, Ruby, Python, JavaScript, Scala.)&lt;/p&gt;

&lt;p&gt;I will emphasize ease of use, since one reason for the overuse of regular expressions is that they are so easy to pull out of one&amp;rsquo;s toolbox.
&lt;/blockquote&gt;&lt;/p&gt;

&lt;h3 id=&#34;revised&#34;&gt;Revised&lt;/h3&gt;

&lt;p&gt;Just on Wednesday, &lt;a href=&#34;../../blog/2013/05/29/pittsburgh-scala-meetup-my-talk-stop-overusing-regular-expressions/&#34;&gt;I had given a version of this talk at the Pittsburgh Scala meetup&lt;/a&gt;, but revised it considerably based on feedback and my own impressions.&lt;/p&gt;

&lt;h3 id=&#34;slides-and-code&#34;&gt;Slides and code&lt;/h3&gt;

&lt;p&gt;The material for the talk &lt;em&gt;as given&lt;/em&gt; is at &lt;a href=&#34;https://github.com/franklinchen/talk-on-overusing-regular-expressions/tree/pitt-tech-fest-talk&#34;&gt;this tag of my GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&#34;https://github.com/franklinchen/talk-on-overusing-regular-expressions&#34;&gt;master branch of the GitHub repository&lt;/a&gt; will always have my latest revisions. I expect continue to add more code in different languages, for example.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/22302440&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/FranklinChen/handout-22302440&#34; title=&#34;Stop overusing regular expressions!&#34; target=&#34;_blank&#34;&gt;Stop overusing regular expressions!&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/FranklinChen&#34; target=&#34;_blank&#34;&gt;Franklin Chen&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;after&#34;&gt;After&lt;/h2&gt;

&lt;p&gt;I tried to minimize discussion of the final Scala code slide, which in one page creates a full parser for &amp;ldquo;toy JSON&amp;rdquo; into a tree of Scala objects, because I intended mainly to give this as proof of concept, not to get into explaining the funny operator overloading that makes the parser so concise, but this seemed to be an issue anyway. I now lean toward thinking that in the future, I need to create a parallel slide that replaces the operators with standard method names instead.&lt;/p&gt;

&lt;p&gt;Why did I use Scala for example code anyway? A major reason is that it is indeed very concise, and yet fully statically typed. I could fit all each of my Scala code examples on a single slide. I did that with Ruby also, up to a point. Writing the classes in Ruby (or Python, Java, etc.) would have taken pages of boilerplate, as opposed to using Scala&amp;rsquo;s case classes. (Of course I wasn&amp;rsquo;t going to use ML or Haskell at all in the talk for this audience.)&lt;/p&gt;

&lt;p&gt;I was surprised to learn how quickly I had finished my presentation (around 45 minutes), given that I had actually added many slides after my Pittsburgh Scala version (which had lasted around the same time). I think it could have been because of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having practiced the talk once, I was more fluent and stumbled less, and explained some things better.&lt;/li&gt;
&lt;li&gt;My additional transitional and motivational slides were clarifying, and reduced confusion that I had to address in my earlier version.&lt;/li&gt;
&lt;li&gt;I still get the impression that when I speak, I get overexcited and talk too quickly!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;attendance&#34;&gt;Attendance&lt;/h3&gt;

&lt;p&gt;Turnout was small, around eight people, but enthusiastic. Half the people I already knew, but the other half were new to me.&lt;/p&gt;

&lt;p&gt;I have some hypotheses about why attendance was relatively low (I think most of the talks I went to had 20-40 people):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Several people actually told me they would have attended my talk, but they too were giving talks or there were others that just happened to have higher priority.&lt;/li&gt;
&lt;li&gt;The topic is more specialized and yet abstract than others: conceptual rather than devoted to &amp;ldquo;how to use library X in language Y&amp;rdquo; or &amp;ldquo;how to improve your career.&lt;/li&gt;
&lt;li&gt;I have no name recognition outside of Pittsburgh, and I submitted a completely non-self-promotional, vague bio; I will definitely fix this in all future talk submissions anywhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Thanks to everyone who came to the talk and asked questions and got discussion going! I appreciate having had the opportunity to share my experiences and recommendations at a conference.&lt;/p&gt;

&lt;p&gt;Ha, I was happy that Josh was able to come to my talk, since he missed the Pittsburgh Scala meetup on Wednesday!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Report on the second Pittsburgh TechFest, 2013</title>
      <link>http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/</link>
      <pubDate>Sat, 01 Jun 2013 22:06:17 -0400</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/06/01/report-on-the-second-pittsburgh-techfest-2013/</guid>
      <description>&lt;p&gt;Last year (&lt;a href=&#34;../../blog/2012/06/09/report-on-the-first-pittsburgh-techfest-2012/&#34;&gt;my report here&lt;/a&gt;), I attended the very first &lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh Tech Fest&lt;/a&gt;, held at &lt;a href=&#34;http://www.laroche.edu/&#34;&gt;LaRoche College&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;my-second-year&#34;&gt;My second year&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://pghtechfest.com/images/pt_logo_2.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Pittsburgh TechFest 2013&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I was very excited to attend it again this year, with a twist: I reported last year that I was inspired by seeing people I know giving talks, and two months later, after the very first &lt;a href=&#34;http://steelcityruby.org/&#34;&gt;Steel City Ruby Conf&lt;/a&gt; &lt;a href=&#34;../../blog/2012/08/07/the-first-steel-city-ruby-conference-an-amazing-experience/&#34;&gt;decided to finally start giving talks myself&lt;/a&gt;, starting with user group talks. When the organizers of this year&amp;rsquo;s Pittsburgh TechFest put out a call for presentations four months ago, I knew I wanted to submit some, and so I did. My talk &amp;ldquo;Stop overusing regular expressions!&amp;rdquo; was accepted!&lt;/p&gt;

&lt;p&gt;This year I had a goal of enjoying the conference even more than I enjoyed last year&amp;rsquo;s, and I succeeded!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;speakers-dinner-the-evening-before-the-conference&#34;&gt;Speakers&amp;rsquo; dinner the evening before the conference&lt;/h2&gt;

&lt;p&gt;All speakers were invited to a speakers&amp;rsquo; dinner for the evening before the one-day conference, so I eagerly attended, in order to see some old friends as well as meet new people I hadn&amp;rsquo;t met before. That was fun. This was at &lt;a href=&#34;http://www.foxandhound.com/&#34;&gt;Fox and Hound Bar and Grill&lt;/a&gt; on McKnight Road. I had to fight through considerable rush hour traffic (and also feeling rather ill: more on that later) to get up north out there from the city, but made it. Tortilla chips, veggie trays, baked potatoes, chicken wings: not my usual diet, but those who know me know that I actually love this stuff, ha (thirty pounds ago I ate like that more often)!&lt;/p&gt;

&lt;p&gt;The always eerie thing is meeting people in person &lt;em&gt;finally&lt;/em&gt; that you&amp;rsquo;ve mainly &amp;ldquo;known&amp;rdquo; from Twitter or email. For example, last year, when I was far more &lt;em&gt;shy&lt;/em&gt;, I never actually met the founders of the new conference and talked with them. At the speakers&amp;rsquo; dinner, I finally met Eric Kepes and Dave Hoerster, for example!&lt;/p&gt;

&lt;p&gt;Last year, I basically made myself invisible and kind of only hung out a little bit with some people, whom I already knew! &lt;a href=&#34;../../blog/2012/08/22/steel-city-ruby-conf-review-part-1-its-about-people/&#34;&gt;My experience at Steel City Ruby Conf completely altered how I feel I should relate to people, not only in programming conferences but in life&lt;/a&gt;. I&amp;rsquo;m still slowly getting out of my shell that I basically lived in for four decades, but I know I&amp;rsquo;ve made some real progress in the past year.&lt;/p&gt;

&lt;h2 id=&#34;breakfast-the-day-of-the-conference&#34;&gt;Breakfast the day of the conference&lt;/h2&gt;

&lt;p&gt;Unfortunately, because I was in a rush, I did not eat any breakfast before leaving home. Somehow, I had assumed there would be breakfast provided at the conference (in the form of bagels and fruit, something like that). I was wrong. There was just juice, coffee, tea. Luckily, I had an emergency energy bar in my bag, and ate it.&lt;/p&gt;

&lt;p&gt;Others I talked to were also confused by the lack of food. Maybe in the future it should be made clear whether there is any food provided at the beginning of the day.&lt;/p&gt;

&lt;h2 id=&#34;keynote&#34;&gt;Keynote&lt;/h2&gt;

&lt;p&gt;This year, the keynote speech was by &lt;a href=&#34;http://www.linkedin.com/in/dickwall&#34;&gt;Dick Wall&lt;/a&gt;, whom some of you may know from the &lt;a href=&#34;http://javaposse.com/&#34;&gt;Java Posse&lt;/a&gt; podcast, others from the &lt;a href=&#34;http://www.scalawags.tv/&#34;&gt;Scalawags&lt;/a&gt; podcast that started half a year ago (Scala fans, you have to watch this: it also features &lt;a href=&#34;http://www.linkedin.com/in/djspiewak&#34;&gt;Daniel Spiewak&lt;/a&gt; and Pittsburgh&amp;rsquo;s own &lt;a href=&#34;http://jsuereth.com/&#34;&gt;Josh Suereth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dick gave a passionate, personal, entertaining, and thoughtful talk urging all of us to adopt a mindset of taking risks and embracing &lt;em&gt;failure&lt;/em&gt;, just as he has in his professional life: he has worked at many companies, including Google and small startups, and his own currently, &lt;a href=&#34;http://www.escalatesoft.com/&#34;&gt;Escalate&lt;/a&gt;, which is devoted to Scala training and mentoring.&lt;/p&gt;

&lt;h3 id=&#34;some-lessons-from-dick&#34;&gt;Some lessons from Dick&lt;/h3&gt;

&lt;p&gt;Some of the lessons Dick imparted, while putting up slides of some pretty epic failures (software or otherwise, including mountain biking, which he does):&lt;/p&gt;

&lt;p&gt;Do not overplan; be prepared to adapt to the present situation.&lt;/p&gt;

&lt;p&gt;If something is not working, don&amp;rsquo;t continue just because you have invested in it already (&lt;a href=&#34;http://en.wikipedia.org/wiki/Sunk_costs&#34;&gt;sunk cost&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Do something new and valuable; for example, don&amp;rsquo;t write yet another &lt;a href=&#34;http://en.wikipedia.org/wiki/Content_management_system&#34;&gt;CMS&lt;/a&gt;, because people have already done it.&lt;/p&gt;

&lt;p&gt;The worst thing to do is to &amp;ldquo;waste engineering effort&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Fail &lt;em&gt;early&lt;/em&gt;, never in production! Example: the &lt;a href=&#34;http://en.wikipedia.org/wiki/Tacoma_Narrows_Bridge&#34;&gt;Tacoma Narrows Bridge&lt;/a&gt; disaster.&lt;/p&gt;

&lt;p&gt;If you fail repeatedly at something, maybe it&amp;rsquo;s time to stop it and move on.&lt;/p&gt;

&lt;p&gt;Honest communication is key. Often, late failure happens because someone was afraid to honestly speak up about design flaws, and often this is because there is a culture against such honesty.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t focus on &lt;a href=&#34;http://en.wikipedia.org/wiki/Happy_path&#34;&gt;happy path testing&lt;/a&gt;, but on the sad path: think up front about how something can fail, before even coding.&lt;/p&gt;

&lt;p&gt;You can&amp;rsquo;t know whether you&amp;rsquo;ve succeeded or failed unless you have defined concretely what success means in a given context.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Software_craftsmanship&#34;&gt;software craftsmanship&lt;/a&gt; movement, which focuses on quality, is well-meaning but often results in people afraid to try new things (such as learn and use a new language) because they are afraid of writing &amp;ldquo;bad code&amp;rdquo; at first. It&amp;rsquo;s OK to start out by writing bad code.&lt;/p&gt;

&lt;p&gt;One way of failing early is to push failure to compile time (he briefly gave a plug for Scala&amp;rsquo;s type system as one way to do this).&lt;/p&gt;

&lt;h2 id=&#34;overview-of-sessions&#34;&gt;Overview of sessions&lt;/h2&gt;

&lt;p&gt;As with last year, or actually far &amp;ldquo;worse&amp;rdquo;, there were a huge number of sessions and limited time slots. I counted six major time slots, with an average of nine sessions during each, so anyone who attended a session in a given time slot basically had choose &lt;em&gt;one out of nine&lt;/em&gt;. This is pretty wild. (Depending on logistics, hopefully next year the conference can move to a two-day format.)&lt;/p&gt;

&lt;p&gt;Consistent with my philosophy in the past year of conference attendance, I chose to seek out talks that fulfilled the following criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;topics revolving around philosophy, experience, wisdom rather than technical tutorials&lt;/li&gt;
&lt;li&gt;speakers &lt;em&gt;not&lt;/em&gt; from Pittsburgh and whom I do &lt;em&gt;not&lt;/em&gt; already know&lt;/li&gt;
&lt;li&gt;stuff I&amp;rsquo;m very interested in that benefits particularly from a guided intro versus looking up a tutorial online&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sessions-i-attended&#34;&gt;Sessions I attended&lt;/h2&gt;

&lt;h3 id=&#34;messaging-with-rabbitmq-handerson-gomes-http-www-linkedin-com-in-handersongomes&#34;&gt;Messaging with RabbitMQ (&lt;a href=&#34;http://www.linkedin.com/in/handersongomes&#34;&gt;Handerson Gomes&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;Actually, I already know Handerson from Pittsburgh meetups. But, as he offered for his session a sequence of lightning talks on RabbitMQ, I thought I would learn something.&lt;/p&gt;

&lt;p&gt;Unfortunately, after his first couple of intro talks, I was feeling so sleepy and ill (more on my physical condition at the end of this report) that I had to bail out and take a nap. I napped for about half an hour, much needed before the second session. Then I realized I wasn&amp;rsquo;t just sleepy, but also starving, and found a vending machine and got more food! Meanwhile, I immediately logged into my health care provider&amp;rsquo;s Web site and submitted a request for a doctor&amp;rsquo;s appointment on Monday.&lt;/p&gt;

&lt;h3 id=&#34;it-s-cool-nobody-else-knows-what-they-re-doing-either-jared-faris-http-www-jaredthenerd-com&#34;&gt;It&amp;rsquo;s Cool, Nobody Else Knows What They&amp;rsquo;re Doing Either (&lt;a href=&#34;http://www.jaredthenerd.com/&#34;&gt;Jared Faris&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;This was an interesting philosophical discussion about career and personal development, much in the lines of the keynote speech by Dick Wall.&lt;/p&gt;

&lt;p&gt;Jared said that to really learn, we have to &lt;em&gt;challenge&lt;/em&gt; ourselves. We have to go beyond our comfort zone. How far? He suggested that we should take on stuff that we&amp;rsquo;re 80% sure we can do: if we are too ambitious and commit to something we feel only 50% sure of, that is too risky, because then we might just fail without really learning something from the experience.&lt;/p&gt;

&lt;h4 id=&#34;some-lessons-from-jared&#34;&gt;Some lessons from Jared&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Ask for help&lt;/em&gt;. Jared related that in the past, he was too proud to ask for help because there&amp;rsquo;s sometimes an implicit gamesmanship among us software developers: we don&amp;rsquo;t want to look dumber than our friends, and we fear rejection. But he learned that asking for help was effective, because in the long run it means getting better faster, rather than flailing alone. Stop trying to impress people.&lt;/p&gt;

&lt;p&gt;The way to stretch yourself is to build a base of what you do know, so that when you go beyond that, you have the tools to move to the next level.&lt;/p&gt;

&lt;p&gt;Be &amp;ldquo;honest but confident&amp;rdquo;. Do not fear the art of self-promotion: if you hold back on speaking up for yourself because you don&amp;rsquo;t know it all, then you&amp;rsquo;ll lose out to someone who does speak up.&lt;/p&gt;

&lt;h3 id=&#34;stop-overusing-regular-expressions-me&#34;&gt;Stop overusing regular expressions! (me)&lt;/h3&gt;

&lt;p&gt;I could not attend any of the interesting sessions in the third time slot because I was giving a talk.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;a href=&#34;../../blog/2013/06/01/pittsburgh-tech-fest-2013-my-talk-stop-overusing-regular-expressions/&#34;&gt;my report about my talk&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;lunch&#34;&gt;Lunch&lt;/h3&gt;

&lt;p&gt;Lunch was of the usual La Roche College cafeteria high quality, nutritious and filling. (And I also ate some cake and pie as well, ha!) This time I socialized more, sitting with some people I knew (but not so well) and people I didn&amp;rsquo;t know. It was great.&lt;/p&gt;

&lt;p&gt;I skipped the lunchtime vendor talks. They might have been interesting, but I needed a break from sitting around in talks, and certainly did not feel like taking lunch outside to eat alone while listening to someone talk! There seemed to be a sizable audience for the one outside the cafeteria, however, so I&amp;rsquo;m happy they found it useful!&lt;/p&gt;

&lt;h3 id=&#34;redesign-is-not-a-four-letter-word-adam-kalnas-http-www-linkedin-com-pub-adam-kalnas-4-660-638&#34;&gt;Redesign is not a four letter word (&lt;a href=&#34;http://www.linkedin.com/pub/adam-kalnas/4/660/638&#34;&gt;Adam Kalnas&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;So this was a short (30-minute) talk about redesign. Although Adam works in the .NET world, the lessons he learned and shared with us are not platform-specific. He described how an architecture at &lt;a href=&#34;http://www.omnyx.com/&#34;&gt;Omnyx&lt;/a&gt; was redesigned successfully. The steps included&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing pinning tests for a system that had no automated tests at all.&lt;/li&gt;
&lt;li&gt;Creating an abstract interface for an existing layer.&lt;/li&gt;
&lt;li&gt;Rewriting code to go through the interface API.&lt;/li&gt;
&lt;li&gt;Creating a parallel implementation for the interface.&lt;/li&gt;
&lt;li&gt;Using &lt;a href=&#34;http://martinfowler.com/bliki/FeatureToggle.html&#34;&gt;feature toggles&lt;/a&gt; to keep both implementations in the code.&lt;/li&gt;
&lt;li&gt;Finally switching off the feature toggle and deleting the old implementation.&lt;/li&gt;
&lt;li&gt;All the while adding more &lt;a href=&#34;http://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt; tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was a really nice story of how a really gnarly legacy architecture was successfully brought into the world of cleaner interfaces and automated tests.&lt;/p&gt;

&lt;h3 id=&#34;node-js-design-patterns-for-the-discerning-developer-aaron-cois-http-www-linkedin-com-pub-constantine-aaron-cois-6-312-824&#34;&gt;Node.js Design Patterns for the Discerning Developer (&lt;a href=&#34;http://www.linkedin.com/pub/constantine-aaron-cois/6/312/824&#34;&gt;Aaron Cois&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;I am fairly new to the &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; world, having first heard of it two years ago at a &lt;a href=&#34;http://meetups.jquery.com/events/nodejs-with-todd-eichel&#34;&gt;March 2011 meeting of the Pittsburgh jQuery meetup&lt;/a&gt; in which Todd Eichel introduced Node to the group.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t currently actively use Node except, amusingly, as a vehicle for testing non-client JavaScript code for my own purposes.&lt;/p&gt;

&lt;p&gt;Aaron basically talked about how to deal with the whole &amp;ldquo;callback hell&amp;rdquo; problem when dealing with the asynchronous APIs of Node. There was hairy looking code that he transformed or wrote wrappers for in order to make less hairy, but to my eye it was still hairy. I have forked his &lt;a href=&#34;https://github.com/cacois/node-patterns-discerning&#34;&gt;GitHub repository for the talk&lt;/a&gt; and hope to go through the code more closely.&lt;/p&gt;

&lt;h3 id=&#34;scaling-out-with-akka-actors-josh-suereth-http-jsuereth-com&#34;&gt;Scaling out with Akka Actors (&lt;a href=&#34;http://jsuereth.com/&#34;&gt;Josh Suereth&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m still not an active &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt; user, although there is something I believe I could use Akka for fruitfully at work, to considerably improve some efficiency (but in practice, nobody is complaining about the speed, so as a practical matter it has been of no priority to scale out the task in question), and also some personal projects.&lt;/p&gt;

&lt;p&gt;Josh has been promoting Akka for some time: it was at last year&amp;rsquo;s Pittsburgh TechFest that I got my first real introduction to it. Since then, Josh has given more advanced talks on architectures using Akka, as Akka continues to improve and provide more features.&lt;/p&gt;

&lt;p&gt;I learned quite a bit from this talk about scaling out (vs. scaling up): the focus on topology, the adding of new actors whenever you want to handle some transient state or manage other actors. It&amp;rsquo;s really a different way of thinking than &amp;ldquo;ordinary&amp;rdquo; programming and is perhaps more faithful to the original concept of &amp;ldquo;object-oriented&amp;rdquo; (being focused entirely on being asynchronous and passing immutable messages) than what has been considered object-oriented in the past couple of decades.&lt;/p&gt;

&lt;p&gt;For more details, check out his slides and code at his &lt;a href=&#34;https://github.com/jsuereth/intro-to-actors&#34;&gt;GitHub repository&lt;/a&gt;. Note that the code for the clusters talk is on the &lt;a href=&#34;https://github.com/jsuereth/intro-to-actors/tree/clusters&#34;&gt;&lt;code&gt;clusters&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am definitely going to start using Akka this year. I think the time for actors has truly come.&lt;/p&gt;

&lt;h2 id=&#34;after&#34;&gt;After&lt;/h2&gt;

&lt;p&gt;Dave Hoerster gave the closing speech, thanking all the many sponsors who supported the conference. It was definitely really cool how many sponsors there were. He also noted that there may be an attempt to scale up to a two-day event, which would be really cool if it can be made to happen.&lt;/p&gt;

&lt;p&gt;There were raffle prizes. Amusingly, the vast number of people randomly chosen had already left the premises (hey, it was a long day), so it took a while to give everything away (although some prizes were marked to be emailed to those who were no longer present).&lt;/p&gt;

&lt;p&gt;After the official conclusion of the conference, some people gathered in groups to have dinner together. I wanted to join Josh and Dick, but knew that I was feeling really miserable and had to go home to shower and sleep.&lt;/p&gt;

&lt;h2 id=&#34;what-next&#34;&gt;What next?&lt;/h2&gt;

&lt;p&gt;I will apply the lessons I learned from all the talks and conversations I participated in.&lt;/p&gt;

&lt;p&gt;One thing I&amp;rsquo;ve done is forked a bunch of GitHub repositories for talks that people have posted online (and not just talks I went to) that seem like useful places for me to concretely learn and explore further. Ideas are fine, but working code is working code!&lt;/p&gt;

&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m really grateful not only to attend this conference, but also speak in it, and learn a lot of things, meet new people (and add their blogs to my RSS feeds as well as follow them on Twitter), and share ideas with everyone. I thank the organizers who put in even more work than last year, because of so many more attendees and speakers! I thank the speakers whose presentations I attended (and those I met whose presentations I would have wanted to attended if not for the time conflicts) for sharing their knowledge and experience. And La Roche College was a good venue (and I noticed that this year there was not the temperature problem of last year, when it was just way too cold in the rooms).&lt;/p&gt;

&lt;p&gt;I hope to come to another Pittsburgh TechFest in 2014. Of course, I would submit some talks for it, and come up with helpful topics that are of increasingly more general interest and use.&lt;/p&gt;

&lt;h2 id=&#34;note-on-being-sick&#34;&gt;Note on being sick&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been sick for a week with contact dermatitis, which I thought I got from poison ivy, but may have come from somewhere else. I was hoping it would clear up on its own, so that I could avoid taking drugs, but I felt increasingly worse yesterday (the itching was very unpleasant and made sleep very difficult), and then during the conference, got even worse. I went home and immediately fell into a nap from exhaustion. When I woke up, I was feeling really terrible. I clearly needed immediate treatment. Abby had come home and told me she was going t take me to the local &lt;a href=&#34;http://upmc.com/Services/urgent-care/Pages/default.aspx&#34;&gt;UPMC Urgent Care&lt;/a&gt; center. So we went, and I got a truly painful steroid shot in the hip. It didn&amp;rsquo;t take long before I started feeling better, with relief from itching, so that I could at least sleep.&lt;/p&gt;

&lt;p&gt;I decided that Dick Wall&amp;rsquo;s advice of not failing repeatedly applied to me. I have failed late and too many times by not going to a doctor earlier. I have reasons (some really terrible experiences with doctors earlier in my life who really botched things up big time, and also I generally don&amp;rsquo;t like getting shots or drugs), but reason has to kick in. I should have gone to a doctor last week when I started having real problems, or even better, gotten my neck rash checked out three weeks ago when it first appeared. I don&amp;rsquo;t like to admit my stupidity and stubbornness, but this is &amp;ldquo;honest communication&amp;rdquo;. I am publicly admitting that I made my own life miserable for weeks, as well as Abby&amp;rsquo;s, and also my fellow conference attendees who had to put up with my marred appearance and energy level (when I explained I wasn&amp;rsquo;t feeling well, people admitted to not wanting to ask me what was up with my neck and skin in general). It wasn&amp;rsquo;t reasonable for me to resist seeking immediate medical attention, and in the future, I will not only use this as a specific learning experience (check myself after any bites or rashes, and immediately have all affected clothing items washed), but a more general one about admitting failure early rather than hoping something going bad with my body will just get better.&lt;/p&gt;

&lt;p&gt;I have had a habit of pushing myself too hard (really messing up not only my &lt;a href=&#34;../../blog/2013/04/20/on-overtraining-and-feeling-injured-two-weeks-before-the-pittsburgh-marathon/&#34;&gt;Pittsburgh Marathon&lt;/a&gt;, but also a &lt;a href=&#34;../../blog/2012/06/03/a-totally-exhausting-rachel-carson-trail-challenge-goal-training-hike/&#34;&gt;Rachel Carson Trail hike&lt;/a&gt; where if I had not been so fatigued, I would have paid more attention to plants brushing against me or the like, and even my 9-mile run last Saturday that proved too taxing given my incomplete recovery from both of those. Pushing too hard is just stupid, and I know it. What&amp;rsquo;s the worst thing: doing something stupid even though you know it; at least if you don&amp;rsquo;t know it, you can be forgiven.&lt;/p&gt;

&lt;h3 id=&#34;update-of-2013-06-02&#34;&gt;(Update of 2013-06-02)&lt;/h3&gt;

&lt;p&gt;The next day, I was feeling much better, but it&amp;rsquo;s clear that full recovery will take a while. I will continue taking steroid pills and applying steroid cream as needed to relieve the itching. I hope that in two weeks I&amp;rsquo;ll be all good again!&lt;/p&gt;

&lt;h3 id=&#34;update-of-2014-06-05&#34;&gt;(Update of 2014-06-05)&lt;/h3&gt;

&lt;p&gt;A year later, I reviewed this post just before my third Pittsburgh TechFest, in 2014, where I am to give another presentation.&lt;/p&gt;

&lt;p&gt;It turned out that my health suffered tremendously for &lt;em&gt;months&lt;/em&gt;. I reported on that &lt;a href=&#34;../../blog/2013/08/10/emerging-from-my-three-months-of-illness-self-pitying-and-self-loathing/&#34;&gt;in August 2013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you&amp;rsquo;ve attended Pittsburgh TechFest or will do so this year, I&amp;rsquo;d like to hear your thoughts about what you&amp;rsquo;ve learned and used, or hope to!&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pittsburgh Scala Meetup: my talk &#34;Stop Overusing Regular Expressions!&#34;</title>
      <link>http://franklinchen.com/blog/2013/05/29/pittsburgh-scala-meetup-my-talk-stop-overusing-regular-expressions/</link>
      <pubDate>Wed, 29 May 2013 22:37:07 -0400</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/05/29/pittsburgh-scala-meetup-my-talk-stop-overusing-regular-expressions/</guid>
      <description>&lt;p&gt;So two days ago, &lt;a href=&#34;http://jamieforrest.com/&#34;&gt;Jamie&lt;/a&gt; sent email out to the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala meetup group&lt;/a&gt; saying that our planned speaker Barrett, who was to have talked about his experiences using &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;, was not going to make it, and asked if anyone else could talk about something.&lt;/p&gt;

&lt;h2 id=&#34;i-suddenly-stepped-in-as-a-substitute-speaker&#34;&gt;I suddenly stepped in as a substitute speaker&lt;/h2&gt;

&lt;p&gt;Since I was already supposed to give a talk on Saturday at the 2013 &lt;a href=&#34;http://pghtechfest.com/&#34;&gt;Pittsburgh TechFest&lt;/a&gt;, and was in the process of finishing my work on it, I volunteered to give an early version of my Pittsburgh TechFest talk &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/115817242/&#34;&gt;at the Scala meetup&lt;/a&gt;, since I actually happen to provide Scala code in the talk. Ha, this meant giving two talks in two successive meetings, because at the last meeting, I gave a &lt;a href=&#34;../../blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/&#34;&gt;talk on property-based testing using ScalaCheck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;My presentation was &amp;ldquo;Stop overusing regular expressions!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Here is my abstract as submitted to Pittsburgh TechFest:
&lt;blockquote&gt;
Regular expressions are very commonly used to process and validate text data. Unfortunately, they suffer from various limitations. I will discuss the limitations and illustrate how using grammars instead can be an improvement. I will make the examples concrete using parsing libraries in a couple of representative languages, although the ideas are language-independent. (I&amp;rsquo;ll try to squeeze in, say, Ruby, Python, JavaScript, Scala.)&lt;/p&gt;

&lt;p&gt;I will emphasize ease of use, since one reason for the overuse of regular expressions is that they are so easy to pull out of one&amp;rsquo;s toolbox.
&lt;/blockquote&gt;&lt;/p&gt;

&lt;h3 id=&#34;attendance&#34;&gt;Attendance&lt;/h3&gt;

&lt;p&gt;Turnout was small: five people other than myself. By the way, we&amp;rsquo;ve discovered unsurprisingly predictable pattern: roughly half the people who RSVP &amp;ldquo;yes&amp;rdquo; on the meetups show up.&lt;/p&gt;

&lt;h3 id=&#34;slides-and-code&#34;&gt;Slides and code&lt;/h3&gt;

&lt;p&gt;The material for the talk &lt;em&gt;as given&lt;/em&gt; is at &lt;a href=&#34;https://github.com/franklinchen/talk-on-overusing-regular-expressions/tree/meetup-talk&#34;&gt;this tag of my GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&#34;https://github.com/franklinchen/talk-on-overusing-regular-expressions&#34;&gt;master branch of the GitHub repository&lt;/a&gt; will always have my latest revisions.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2013-06-01&#34;&gt;(Update of 2013-06-01)&lt;/h4&gt;

&lt;p&gt;I made substantial revisions in the presentation and code before Pittsburgh TechFest. I recommend looking at the latest version. Details in my &lt;a href=&#34;../../blog/2013/06/01/pittsburgh-tech-fest-2013-my-talk-stop-overusing-regular-expressions/&#34;&gt;report on my talk at Pittsburgh TechFest 2013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/22302440&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/FranklinChen/handout-22302440&#34; title=&#34;Stop overusing regular expressions!&#34; target=&#34;_blank&#34;&gt;Stop overusing regular expressions!&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/FranklinChen&#34; target=&#34;_blank&#34;&gt;Franklin Chen&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;after&#34;&gt;After&lt;/h2&gt;

&lt;p&gt;There was great feedback after the talk. Some material I went through took quickly, without a smooth transition to relate ideas, and my final page of Scala code that contained dense use of all kinds of operators and idioms was something I stumbled through trying to explain, even as I was feeling that explaining it was a tangent from the main points of the talk.&lt;/p&gt;

&lt;p&gt;There was casual discussion of Scala and other topics after the talk as well. I was pretty excited to hear about how useful Akka has become in solving important problems.&lt;/p&gt;

&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Thanks to everyone who came to the talk! I enjoyed sharing my experiences and recommendations, and engaging in discussion about the topics, and getting to make a mental note of things to change in my delivery, slides, and code for Pittsburgh TechFest on Saturday.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;http://justin-pihony.blogspot.com/&#34;&gt;Justin&lt;/a&gt; for arranging a meeting place for the Pittsburgh Scala meetup at &lt;a href=&#34;http://mmodal.com/&#34;&gt;M*Modal&lt;/a&gt;, and thanks to M*Modal for providing the space!&lt;/p&gt;

&lt;p&gt;And thanks to Jamie again for creating the Pittsburgh Scala meetup group, and &lt;a href=&#34;http://typesafe.com/&#34;&gt;TypeSafe&lt;/a&gt; for being a sponsor now, thanks to &lt;a href=&#34;http://jsuereth.com/&#34;&gt;Josh&lt;/a&gt; (who sadly did not make it to this meeting).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My Pittsburgh Scala Meetup talk on property-based testing using ScalaCheck</title>
      <link>http://franklinchen.com/blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/</link>
      <pubDate>Thu, 11 Apr 2013 22:49:30 -0400</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/</guid>
      <description>

&lt;p&gt;Tonight was the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/108080782/&#34;&gt;third meeting&lt;/a&gt; of the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt;. Our last meeting was &lt;a href=&#34;../../blog/2013/02/21/the-second-meeting-of-the-pittsburgh-scala-meetup-josh-suereth-on-functional-patterns-for-the-asynchronous-web/&#34;&gt;in late February&lt;/a&gt;, and we didn&amp;rsquo;t have a meeting in March.&lt;/p&gt;

&lt;h2 id=&#34;attendance&#34;&gt;Attendance&lt;/h2&gt;

&lt;p&gt;This time there were only six of us in attendance, but that had its advantages, as it resulted in everyone really participating fully in discussion.&lt;/p&gt;

&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;I gave a presentation &amp;ldquo;Beyond xUnit example-based testing: property-based testing with ScalaCheck&amp;rdquo; as an introduction to property-based testing, with examples using &lt;a href=&#34;http://www.scalacheck.org/&#34;&gt;ScalaCheck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prepared the presentation with the goal of spreading the word on property-based testing as a complement to much more widely used methods of testing in the TDD/BDD software development communities. My impression has been that outside of the functional programming communities such as those in Haskell (the pioneer of &lt;a href=&#34;http://en.wikipedia.org/wiki/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt;), ML, and Haskell, there has not been as much use of property-based methods of design and testing. Fortunately, this has been changing.&lt;/p&gt;

&lt;p&gt;In any case, I personally can no longer imagine not starting out design exploration without using ScalaCheck on Scala or Java based projects. It&amp;rsquo;s a useful additional tool for the developer&amp;rsquo;s toolkit.&lt;/p&gt;

&lt;h3 id=&#34;slides-and-code&#34;&gt;Slides and code&lt;/h3&gt;

&lt;p&gt;My slides are available &lt;a href=&#34;http://www.slideshare.net/FranklinChen/handout-18644963&#34;&gt;on slideshare&lt;/a&gt;, and a full SBT project of the code is &lt;a href=&#34;https://github.com/franklinchen/talk-on-scalacheck&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that the slides are not in any way a substitute for the actual talk and the questions and answers and discussion during and after it! They are most useful as memory joggers for those who actually attended the presentation. A set of slides is nothing resembling a technical article or a blog post.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/18644963&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/FranklinChen/handout-18644963&#34; title=&#34;Beyond xUnit example-based testing: property-based testing with ScalaCheck&#34; target=&#34;_blank&#34;&gt;Beyond xUnit example-based testing: property-based testing with ScalaCheck&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/FranklinChen&#34; target=&#34;_blank&#34;&gt;Franklin Chen&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;after&#34;&gt;After&lt;/h2&gt;

&lt;p&gt;Out of some questions during the talk, we came up with an idea for improving ScalaCheck that might be an interesting group project to work on.&lt;/p&gt;

&lt;p&gt;There was also more general discussion of using Scala, upcoming and ongoing local Pittsburgh general tech gatherings, Josh filling us in on developments in the Scala world, and ideas for future presentations.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was a small gathering, but I enjoyed presenting on property-based testing, and we had some really good discussions. Another meeting for the Pittsburgh Scala Meetup has already been &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/112652112/&#34;&gt;scheduled for May&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenHack Pittsburgh: exploring Scala odds and ends</title>
      <link>http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/</link>
      <pubDate>Mon, 25 Mar 2013 22:43:00 -0400</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/03/25/openhack-pittsburgh-exploring-scala-odds-and-ends/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/106184432/&#34;&gt;A third OpenHack Pittsburgh&lt;/a&gt; meeting was organized, and I attended again. It was held again at &lt;a href=&#34;http://www.thebeautyshoppe.org/&#34;&gt;The Beauty Shoppe&lt;/a&gt;, just like the &lt;a href=&#34;../../blog/2013/02/25-openhack-pittsburgh-studying-scala/&#34;&gt;previous time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was pleased by how much progress had been made in the construction inside. The space was looking really nice.&lt;/p&gt;

&lt;h2 id=&#34;scala-stuff&#34;&gt;Scala stuff&lt;/h2&gt;

&lt;p&gt;My plan was to continue working on a personal project in Scala. That plan kind of changed because Roy wanted to ask me questions about Scala. I told him that I&amp;rsquo;m still learning stuff myself, but answered his questions as well as I could.&lt;/p&gt;

&lt;h3 id=&#34;unit-testing&#34;&gt;Unit testing&lt;/h3&gt;

&lt;p&gt;One question Roy had was about unit test frameworks and generating independent tests (as opposed to writing a single test that makes many generated assertions, because such a test would simply stop at the first failed assertion. I told him this was easy to do with either the &lt;a href=&#34;http://etorreborre.github.com/specs2/&#34;&gt;Specs2&lt;/a&gt; unit testing framework or the &lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt; one (I use Specs2).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s sample code showing &lt;a href=&#34;https://github.com/FranklinChen/test-loop-over-tests&#34;&gt;how to do it&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;property-based-testing&#34;&gt;Property-based testing&lt;/h3&gt;

&lt;p&gt;I also mentioned that I was working on a presentation on a cool Scala library supporting property-based testing, &lt;a href=&#34;http://www.scalacheck.org/&#34;&gt;ScalaCheck&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2013-04-11&#34;&gt;(Update of 2013-04-11)&lt;/h4&gt;

&lt;p&gt;I ended up &lt;a href=&#34;../../blog/2013/04/11/my-pittsburgh-scala-meetup-talk-on-property-based-testing-using-scalacheck/&#34;&gt;giving a talk at the Pittsburgh Scala meetup in April on ScalaCheck&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;continuations&#34;&gt;Continuations&lt;/h3&gt;

&lt;p&gt;Roy asked about continuations in Scala, in the context of an idea he had for a Web app.&lt;/p&gt;

&lt;p&gt;I said that I hadn&amp;rsquo;t personally used first-class continuations in Scala, but knew support for delimited continuations existed as a compiler plugin. So I looked up how to use them and created a little project as proof of concept (nothing worth seeing, just typical examples of code with &lt;code&gt;shift&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; comparable to how I&amp;rsquo;d seen them used in other languages with delimited continuations); check out &lt;a href=&#34;http://suereth.blogspot.com/2010/03/how-you-should-think-about-delimited.html&#34;&gt;Josh Suereth&amp;rsquo;s (somewhat dated) article on delimited continuations in Scala&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;But I asked Roy what he really wanted continuations for anyway. They are a low-level concept, and there are higher-level constructs built on top of continuations that I think are more useful.&lt;/p&gt;

&lt;p&gt;He said that he wanted to be able to have code &amp;ldquo;look&amp;rdquo; like it was synchronous but actually be asynchronous.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2014-04-21&#34;&gt;(Update of 2014-04-21)&lt;/h4&gt;

&lt;p&gt;Scala continuations have been deprecated in &lt;a href=&#34;http://typesafe.com/blog/scala-211-has-arrived&#34;&gt;Scala 2.11&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;futures&#34;&gt;Futures&lt;/h3&gt;

&lt;p&gt;So I told him, that&amp;rsquo;s the perfect use case for &lt;a href=&#34;http://docs.scala-lang.org/overviews/core/futures.html&#34;&gt;futures&lt;/a&gt;, which are well-supported in Scala, especially because of their compositional monadic properties in conjunction with nice &lt;code&gt;for&lt;/code&gt;-comprehension syntax.&lt;/p&gt;

&lt;p&gt;I said, the only drawback is that you have to write code in monadic style.&lt;/p&gt;

&lt;p&gt;When I went home after OpenHack Pittsburgh, however, I coincidentally found that there was a project to improve the syntax of writing this kind of asynchronous computation! &lt;a href=&#34;http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html&#34;&gt;Akka Dataflow&lt;/a&gt; does precisely this, using the continuation plugin.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2013-08-27&#34;&gt;(Update of 2013-08-27)&lt;/h4&gt;

&lt;p&gt;There has been other work to improve syntactic support for asynchronous computation. &lt;a href=&#34;https://github.com/scala/async&#34;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&#34;http://scalamacros.org/&#34;&gt;macros&lt;/a&gt; to try to provide the nice syntactic experience without the overhead of the continuation plugin.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2013-12-17&#34;&gt;(Update of 2013-12-17)&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/akka/akka/commit/66e40084946f6f993a2c62d9921718704daf448a&#34;&gt;&lt;code&gt;dataflow&lt;/code&gt; has been deprecated&lt;/a&gt;, now that &lt;code&gt;async&lt;/code&gt; is fully mature (I have been happily using it for a while now).&lt;/p&gt;

&lt;h4 id=&#34;update-of-2013-12-31&#34;&gt;(Update of 2013-12-31)&lt;/h4&gt;

&lt;p&gt;More specifically, &lt;code&gt;async&lt;/code&gt; was much improved just in time for it to be officially used in the Coursera course &amp;ldquo;Principles of Reactive Programming&amp;rdquo;, which &lt;a href=&#34;http://conscientiousprogrammer.com/blog/2013/12/31/review-of-the-free-coursera-course-principles-of-reactive-programming/&#34;&gt;I just completed and reviewed&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;implicits&#34;&gt;Implicits&lt;/h3&gt;

&lt;p&gt;Roy asked me about other interesting features of Scala. I had to say something about implicits, of course, useful for simulating monkey patching as well as simulating Haskell type classes.&lt;/p&gt;

&lt;p&gt;Implicits are probably the single most interesting language feature of Scala.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2014-02-13&#34;&gt;(Update of 2014-02-13)&lt;/h4&gt;

&lt;p&gt;There was a &lt;a href=&#34;http://conscientiousprogrammer.com/blog/2014/02/13/pittsburgh-scala-meetup-implicits/&#34;&gt;Pittsburgh Scala Meetup session on implicits&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;specialization-of-generics&#34;&gt;Specialization of generics&lt;/h3&gt;

&lt;p&gt;Roy wanted to know whether generics can be specialized in Scala (in contrast to Java, which treats generics as erasure). I said, yes, actually. Fully automatic, efficient specialization is still being improved on, but for now, there&amp;rsquo;s a manual way to do specialization through the &lt;a href=&#34;http://lampwww.epfl.ch/~dragos/files/scala-spec.pdf&#34;&gt;&lt;code&gt;@specialized&lt;/code&gt; annotation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2014-07-17&#34;&gt;(Update of 2014-07-17)&lt;/h4&gt;

&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;http://scala-miniboxing.org/&#34;&gt;Miniboxing&lt;/a&gt; for efficiency.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was stimulating talking with Roy about Scala and trying to explain stuff to him on the fly, or look stuff up (thank goodness for WiFi in The Beauty Shoppe!), or code something right there and then. The conversations also caused me to do my homework after the meetup!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pittsburgh Python: distribute and other Python community controversies</title>
      <link>http://franklinchen.com/blog/2013/02/27/pittsburgh-python-distribute-and-other-python-community-controversies/</link>
      <pubDate>Wed, 27 Feb 2013 22:12:03 -0500</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/02/27/pittsburgh-python-distribute-and-other-python-community-controversies/</guid>
      <description>&lt;p&gt;I was very interested to attend this month&amp;rsquo;s &lt;a href=&#34;http://www.meetup.com/pghpython/&#34;&gt;Pittsburgh Python User Group&lt;/a&gt; &lt;a href=&#34;http://www.meetup.com/pghpython/events/95504432/&#34;&gt;meeting&lt;/a&gt; because Nick Sloan was going to give a talk about packaging with &lt;a href=&#34;http://pythonhosted.org/distribute/&#34;&gt;&lt;code&gt;distribute&lt;/code&gt;&lt;/a&gt;: packaging in Python has been a &lt;em&gt;huge source of confusion&lt;/em&gt; to me, both as a user and as a developer.&lt;/p&gt;

&lt;p&gt;Since my use of Python at work or for personal purposes has not been very large scale, I have limped along with settling on a clean setup to use for packaging my code. This is in stark contrast to my management of libraries in Perl, Ruby, and Java, where I think there has been more of a consensus in adoption of certain tools and conventions.&lt;/p&gt;

&lt;p&gt;Also, Joe Esposito sent around some links to interesting discussions and news in the global Python community, so I looked forward to hearing what everyone thought.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-problem-with-python-packaging&#34;&gt;The problem with Python packaging&lt;/h2&gt;

&lt;p&gt;OK, so the big problem I faced when trying to nicely set up packaging for a personal project a while ago was that there are many options. The &lt;a href=&#34;http://en.wikipedia.org/wiki/The_Paradox_of_Choice:_Why_More_Is_Less&#34;&gt;paradox of choice&lt;/a&gt; is insidious, and it is surprising to me in the Python community, which has generally prided itself on a general consensus on a philosophy of &lt;a href=&#34;http://wiki.python.org/moin/TOOWTDI&#34;&gt;&amp;ldquo;There&amp;rsquo;s Only One Way To Do It&amp;rdquo;&lt;/a&gt;, in sharp and deliberate contrast to the Perl community&amp;rsquo;s philosophy of &lt;a href=&#34;http://en.wikipedia.org/wiki/There&#39;s_more_than_one_way_to_do_it&#34;&gt;&amp;ldquo;There&amp;rsquo;s More Than One Way To Do It&amp;rdquo;&lt;/a&gt; (TIMTOWTDI).&lt;/p&gt;

&lt;h2 id=&#34;nick-sloan-on-packaging-with-distribute-http-pythonhosted-org-distribute&#34;&gt;Nick Sloan on packaging with &lt;a href=&#34;http://pythonhosted.org/distribute/&#34;&gt;&lt;code&gt;distribute&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Nick summarized the situation of existing packaging systems for Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/2/distutils/&#34;&gt;&lt;code&gt;distutils&lt;/code&gt;&lt;/a&gt; is lacking in features&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pythonhosted.org/setuptools/index.html&#34;&gt;&lt;code&gt;setuptools&lt;/code&gt;&lt;/a&gt; is stagnant&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pythonhosted.org/distribute/&#34;&gt;&lt;code&gt;distribute&lt;/code&gt;&lt;/a&gt; is a fork of &lt;code&gt;setuptools&lt;/code&gt; and aims to replace it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He then illustrated the basics of packaging with writing &lt;code&gt;setup.py&lt;/code&gt;, referencing &lt;a href=&#34;https://medium.com/kr-projects/b8388ba7c1a&#34;&gt;Kenneth Reitz&amp;rsquo;s recommendations on repository structure&lt;/a&gt;, based on &lt;code&gt;distribute&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;kenneth-reitz-s-recommendations-on-repository-structure&#34;&gt;Kenneth Reitz&amp;rsquo;s recommendations on repository structure&lt;/h3&gt;

&lt;p&gt;The most interesting thing about Kenneth Reitz&amp;rsquo;s recommendations was that he advocated separating out &lt;em&gt;tests&lt;/em&gt; from the code of a module, to reduce dependencies for the installer and user of the module. I definitely prefer to have a separate directory tree for tests, as is standard by &lt;em&gt;convention&lt;/em&gt; when I write tests for projects in many other languages. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perl: &lt;code&gt;t/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ruby: &lt;code&gt;spec/&lt;/code&gt; when using RSpec&lt;/li&gt;
&lt;li&gt;Java: &lt;code&gt;src/test/&lt;/code&gt; when using JUnit&lt;/li&gt;
&lt;li&gt;Scala: &lt;code&gt;src/test/&lt;/code&gt; when using Specs2 and ScalaCheck&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;rsquo;t really like his &lt;code&gt;tests/context.py&lt;/code&gt; system of imports, as it is too dynamic in chasing down imports, and therefore may not play well by default with standard tools:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sys&lt;/span&gt;
sys&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;abspath(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;’&lt;/span&gt;))

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;sample&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;.context&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; sample
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That said, I decided to give his recommendations a shot.&lt;/p&gt;

&lt;h3 id=&#34;another-twist&#34;&gt;Another twist&lt;/h3&gt;

&lt;p&gt;Meanwhile, Nick noted that there is also a &lt;a href=&#34;http://pythonhosted.org/Distutils2/&#34;&gt;&lt;code&gt;distutils2&lt;/code&gt;&lt;/a&gt; project now, to improve &lt;code&gt;distutils&lt;/code&gt;, and that nobody is working on &lt;code&gt;distribute&lt;/code&gt; any more. This sounds like a crazy soap opera in the Python world.&lt;/p&gt;

&lt;h2 id=&#34;python-community-debates-and-news&#34;&gt;Python community debates and news&lt;/h2&gt;

&lt;p&gt;Joe opened up the discussion on Python community news.&lt;/p&gt;

&lt;h3 id=&#34;start-writing-more-classes&#34;&gt;&amp;ldquo;Start Writing More Classes&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;In the Python community, there has always been some controversy over whether to go all-out object-oriented with classes or write in a more functional style. The language supports both styles, although classes were a fairly late addition to the language.&lt;/p&gt;

&lt;h4 id=&#34;stop-writing-classes&#34;&gt;&amp;ldquo;Stop Writing Classes&amp;rdquo;?&lt;/h4&gt;

&lt;p&gt;Last year, at PyCon 2012, there was a talk, &amp;ldquo;Stop Writing Classes&amp;rdquo;, that made waves:&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/o9pEzgHorH0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I thought it was a good talk, because it exposed how many things done with classes are superfluous, creating code bloat and deeply nested hierarchies: often you can just use a functional style with data that is not all wrapped into classes.&lt;/p&gt;

&lt;h4 id=&#34;a-rebuttal&#34;&gt;A rebuttal&lt;/h4&gt;

&lt;p&gt;Just two weeks ago, someone wrote a post on how &lt;a href=&#34;http://lucumr.pocoo.org/2013/2/13/moar-classes/&#34;&gt;Python programmers should be writing more classes, not less&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was not happy about this post because it set up a straw man. Really, he was simply arguing for modular code vs. monolithic code, and observing that some people who don&amp;rsquo;t use classes end up writing monolithic code. He even states as much at the end of his post. So the title of his post is misleading.&lt;/p&gt;

&lt;h3 id=&#34;other-news&#34;&gt;Other news&lt;/h3&gt;

&lt;p&gt;There were various other smaller topics discussed, but &lt;code&gt;distribute&lt;/code&gt; and classes dominated this evening.&lt;/p&gt;

&lt;h2 id=&#34;updates-after-the-meetup&#34;&gt;(Updates after the meetup)&lt;/h2&gt;

&lt;p&gt;After I went home, I updated &lt;a href=&#34;https://github.com/FranklinChen/project-euler-python&#34;&gt;one of my sample Python projects&lt;/a&gt; to adhere to Kenneth Reitz&amp;rsquo;s guidelines.&lt;/p&gt;

&lt;p&gt;Also, some weeks later, I noticed an &lt;a href=&#34;http://mail.python.org/pipermail/distutils-sig/2013-March/020126.html&#34;&gt;announcement that &lt;code&gt;setuptools&lt;/code&gt; and &lt;code&gt;distribute&lt;/code&gt; were going to merge efforts&lt;/a&gt;. Hooray!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenHack Pittsburgh: studying Scala</title>
      <link>http://franklinchen.com/blog/2013/02/25/openhack-pittsburgh-studying-scala/</link>
      <pubDate>Mon, 25 Feb 2013 22:58:33 -0500</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/02/25/openhack-pittsburgh-studying-scala/</guid>
      <description>

&lt;p&gt;Last month was the very first meeting of &lt;a href=&#34;../../blog/2013/01/21/attending-the-first-openhack-pittsburgh-meeting/&#34;&gt;OpenHack Pittsburgh&lt;/a&gt;, so I eagerlly looked forward to attending &lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/100822012/&#34;&gt;the second one&lt;/a&gt;, which was held at &lt;a href=&#34;http://www.thebeautyshoppe.org/&#34;&gt;The Beauty Shoppe&lt;/a&gt;, a new coworking space in East Liberty.&lt;/p&gt;

&lt;p&gt;The space was still under construction and so it was kind of surreal being in there with a half-finished bathroom, walls and rooms that were not completely done yet, missing light fixtures, etc. It was cool that we were allowed to use the space though.&lt;/p&gt;

&lt;h2 id=&#34;ashamed-of-leaving-early&#34;&gt;Ashamed of leaving early&lt;/h2&gt;

&lt;p&gt;Unfortunately, there was something of a schedule conflict, because I was also looking forward to attending, in the same evening, another edition of the French and blues music jam I&amp;rsquo;ve been participating in. I ended up decided to attend OpenHack Pittsburgh for a while before leaving early and going to the music jam. &lt;a href=&#34;../../blog/2013/02/25/stepping-it-up-at-the-french-and-blues-jam/&#34;&gt;I did make it to the music jam&lt;/a&gt;, but in retrospect, I should have simply chosen not to attend OpenHack Pittsburgh at all.&lt;/p&gt;

&lt;p&gt;I felt bad about leaving early, when everyone was so excited about the projects they were working on for the evening. There was even a &lt;a href=&#34;http://en.wikipedia.org/wiki/3D_printing&#34;&gt;3d printer&lt;/a&gt; in action!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://openhack.github.io/pittsburgh/images/2013-01/whit-coin-counter.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Chad and the coin counter&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Because I knew I was leaving early, I spent the time there just continuing to learn more Scala on my own.&lt;/p&gt;

&lt;p&gt;I felt it was impolite for me to attend an event when I knew I had to leave early. I will remember this in the future.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Fear_of_missing_out&#34;&gt;Fear of missing out&lt;/a&gt; is insidious. It is better to be fully present and engaged in &lt;em&gt;fewer&lt;/em&gt; activities rather than try to do too much. I felt deeply ashamed of leaving early, and vowed that if I attend OpenHack Pittsburgh meetings in the future, I will never leave early again. Something like this should be all or none.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The second meeting of the Pittsburgh Scala Meetup: Josh Suereth on functional patterns for the asynchronous Web</title>
      <link>http://franklinchen.com/blog/2013/02/21/the-second-meeting-of-the-pittsburgh-scala-meetup-josh-suereth-on-functional-patterns-for-the-asynchronous-web/</link>
      <pubDate>Thu, 21 Feb 2013 23:56:50 -0400</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/02/21/the-second-meeting-of-the-pittsburgh-scala-meetup-josh-suereth-on-functional-patterns-for-the-asynchronous-web/</guid>
      <description>

&lt;p&gt;Tonight was the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/99077622/&#34;&gt;second meeting&lt;/a&gt; of the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala Meetup&lt;/a&gt;. It was our first &amp;ldquo;real&amp;rdquo; meeting, in the sense that &lt;a href=&#34;../../blog/2013/01/11/2013-is-my-year-of-scala/&#34;&gt;our first meetup&lt;/a&gt; was just a little gathering in a bar, and this time, we were able to use a nice space in &lt;a href=&#34;http://www.revvoakland.com/&#34;&gt;Revv Oakland&lt;/a&gt; to meet in.&lt;/p&gt;

&lt;h2 id=&#34;attendance&#34;&gt;Attendance&lt;/h2&gt;

&lt;p&gt;A large number of people showed up, which was encouraging, indicating local Pittsburgh interest in Scala.&lt;/p&gt;

&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://jsuereth.com/&#34;&gt;Josh Suereth&lt;/a&gt; gave the first presentation for the group, a version targeted more to novices of the &lt;a href=&#34;http://jsuereth.com/scala/2013/02/13/nescala-intro-to-fp-talk.html&#34;&gt;talk he gave at NE Scala 2013&lt;/a&gt;, &amp;ldquo;Functional Programming Patterns for the Asynchronous Web&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;By the way, his NE Scala talk, which was constrained because it had be squeezed into 30 minutes and for a diverse audience, is available &lt;a href=&#34;http://nescala.org/#t-12229286&#34;&gt;at the NE Scala site as both video and slides&lt;/a&gt;. I didn&amp;rsquo;t attend his talk when &lt;a href=&#34;../../blog/2013/02/10/ne-scala-2013-my-first-scala-conference/&#34;&gt;we went to NE Scala&lt;/a&gt; because he test-drove it with Jamie and me and I wanted to see people I didn&amp;rsquo;t already know, and different topics.&lt;/p&gt;

&lt;h2 id=&#34;after&#34;&gt;After&lt;/h2&gt;

&lt;p&gt;After the talk, there was general discussion.&lt;/p&gt;

&lt;p&gt;We also brainstormed ideas for a group project. One of the ideas was to create a Web site using &lt;a href=&#34;http://www.playframework.com/&#34;&gt;Play&lt;/a&gt;. Jamie created an initial &lt;a href=&#34;https://github.com/pghscala/web&#34;&gt;GitHub repository for this&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s great that the Pittsburgh Scala Meetup is really getting off the ground now. Now that we have a space to use, hopefully we will begin a regularly occurring meeting. And of course, volunteers are needed to start giving talks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NE Scala 2013: my first Scala conference!</title>
      <link>http://franklinchen.com/blog/2013/02/10/ne-scala-2013-my-first-scala-conference/</link>
      <pubDate>Sun, 10 Feb 2013 20:20:13 -0500</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/02/10/ne-scala-2013-my-first-scala-conference/</guid>
      <description>

&lt;p&gt;I went to my first ever Scala conference, &lt;a href=&#34;http://nescala.org/&#34;&gt;NE Scala&lt;/a&gt;, held in Philadelphia, with Josh and Jamie, as mentioned in my report on &lt;a href=&#34;../../blog/2013/01/11/2013-is-my-year-of-scala/&#34;&gt;the very first Pittsburgh Scala meetup group meeting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was intense. Being a novice to Scala, most of the talks I attended covered stuff completely new to me.&lt;/p&gt;

&lt;p&gt;I returned determined to dig deeper into the Scala ecosystem and use the language effectively.&lt;/p&gt;

&lt;h2 id=&#34;videos&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;Videos of the talks are available at &lt;a href=&#34;http://www.youtube.com/playlist?list=PLndbWGuLoHeaOpTHoNhelI4NdnSqpeXA7&#34;&gt;this play list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the way, &lt;a href=&#34;http://scalawags.tv/scalawags-live-at-ne-scala&#34;&gt;an episode of Scalawags was recorded live at NE Scala&lt;/a&gt; and does not appear in that play list. I was present and thought it was a very useful question and answer session.&lt;/p&gt;

&lt;h2 id=&#34;update-of-2014-01-16&#34;&gt;(Update of 2014-01-16)&lt;/h2&gt;

&lt;p&gt;This is an unfinished post that is one of many in the past two years that lay unfinished because I had originally planned to write a very detailed report but never got around to it. I decided that I might as well release all these unfinished posts rather than leave them completely out of the record.&lt;/p&gt;

&lt;p&gt;Meanwhile, almost a year later, I am still using Scala. I really did stop writing new Java code at work and switch to Scala.&lt;/p&gt;

&lt;p&gt;NE Scala 2014 registration recently opened up; unfortunately, it is in New York City, far away, and space is limited, so I am not attending.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Attending the first OpenHack Pittsburgh meeting</title>
      <link>http://franklinchen.com/blog/2013/01/21/attending-the-first-openhack-pittsburgh-meeting/</link>
      <pubDate>Mon, 21 Jan 2013 21:49:13 -0500</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/01/21/attending-the-first-openhack-pittsburgh-meeting/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://openhack.github.com/images/logo-green.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;OpenHack logo&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I was excited to attend the &lt;a href=&#34;http://www.meetup.com/pittsburgh-ruby/events/96033112/&#34;&gt;very first meeting&lt;/a&gt; of &lt;a href=&#34;http://openhack.github.com/pittsburgh/&#34;&gt;OpenHack Pittsburgh&lt;/a&gt;, out of curiosity and as a way to force myself to make progress on a personal programming project of mine using Scala (ironically, after spending the day at work on Scala; apparently I couldn&amp;rsquo;t get enough of it).&lt;/p&gt;

&lt;p&gt;The point of &lt;a href=&#34;http://openhack.github.com/&#34;&gt;OpenHack&lt;/a&gt; is to provide a space for programmers to meet up and work on something. It could be a shared project, it could be a personal project.&lt;/p&gt;

&lt;p&gt;Some people come with something to work on, others come to meet other programmers and pitch in on a project, others come to learn something. It was cool that some people left the first meeting finally getting set up on Ruby or Python or Clojure, and working on a project, with help from other people.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../../images/openhack-pittsburgh-2013-01-21/room.jpeg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;One room&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;../../images/openhack-pittsburgh-2013-01-21/conference-room.jpeg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Conference room&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;And yes, in the two hours I was there, I did make good progress on my project. It&amp;rsquo;s not finished yet though.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../../images/openhack-pittsburgh-2013-01-21/closeup.jpeg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Franklin and others&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Many thanks to &lt;a href=&#34;http://www.4moms.com/&#34;&gt;4moms&lt;/a&gt; for hosting the first OpenHack Pittsburgh meetup, and providing the sandwiches and chips and beverages!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2013 is my year of Scala</title>
      <link>http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/</link>
      <pubDate>Fri, 11 Jan 2013 15:17:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/</guid>
      <description>&lt;p&gt;Last night was the &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/events/93174312/&#34;&gt;first meeting&lt;/a&gt; of the new &lt;a href=&#34;http://www.meetup.com/Pittsburgh-Scala-Meetup/&#34;&gt;Pittsburgh Scala meetup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And this morning I suddenly signed up to attend the &lt;a href=&#34;http://nescala.org/&#34;&gt;Northeast Scala Symposium&lt;/a&gt; (NE Scala) being held soon in February in Philadelphia!&lt;/p&gt;

&lt;p&gt;2013 is my &amp;ldquo;year of Scala&amp;rdquo;. What does this mean?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;leaving-java&#34;&gt;&amp;ldquo;Leaving&amp;rdquo; Java&lt;/h2&gt;

&lt;p&gt;I just &lt;a href=&#34;../../blog/2012/11/15/review-of-courseras-fall-2012-functional-programming-principles-in-scala/&#34;&gt;recently went through Martin Odersky&amp;rsquo;s &amp;ldquo;Functional Programming Principles in Scala&amp;rdquo; course&lt;/a&gt;. As a result of that, I decided on New Year that 2013 is going to be my &amp;ldquo;year of Scala&amp;rdquo;, which in practice means that I will use it as my main general-purpose programming language for software development wherever feasible. In particular, at work I have been in the process of converting a large Java project from using &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; for a complex build to using the Scala-based &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt; instead (last year I was &lt;a href=&#34;../../blog/2012/09/24/a-short-example-of-why-i-prefer-static-typing-learning-gradle/&#34;&gt;evaluating both SBT and the Groovy-based Gradle&lt;/a&gt;, but SBT won, after I figured out how to do what I need with it).&lt;/p&gt;

&lt;p&gt;The beauty of Scala is that you can seamlessly continue to use existing Java code and libraries; this interoperability is a huge win, compared to other statically typed functional programming languages such as ML and Haskell.&lt;/p&gt;

&lt;h2 id=&#34;the-first-pittsburgh-scala-meetup-session&#34;&gt;The first Pittsburgh Scala meetup session&lt;/h2&gt;

&lt;p&gt;It was an informal social meeting upstairs in the Harvard and Highland bar (resulting from not yet obtaining an official quiet place to really meet regularly).&lt;/p&gt;

&lt;p&gt;It turned out that only six of us showed up for this informal meeting. &lt;a href=&#34;http://jamieforrest.com/&#34;&gt;Jamie Forrest&lt;/a&gt;, who created this meetup group, was there, as was &lt;a href=&#34;http://jsuereth.com/&#34;&gt;Josh Suereth&lt;/a&gt;, who works for &lt;a href=&#34;http://www.typesafe.com/&#34;&gt;Typesafe&lt;/a&gt; and has regularly been involved in Scala &lt;a href=&#34;../../blog/2011/10/26/open-spaces-success-at-the-pittsburgh-java-users-group/&#34;&gt;discussions&lt;/a&gt; and &lt;a href=&#34;../../blog/2012/06/09/report-on-the-first-pittsburgh-techfest-2012/&#34;&gt;presentations&lt;/a&gt; in the Pittsburgh area. I also met three people I hadn&amp;rsquo;t known before, Andrii, Ashton, and Barrett.&lt;/p&gt;

&lt;p&gt;It was kind of loud in the bar, so it was often difficult for me to hear, but I think we had a good time meeting each other and exchanging some thoughts about how we use Scala (or plan to use it) and why.&lt;/p&gt;

&lt;p&gt;So now that we&amp;rsquo;ve gotten the meetup group off the ground, I look forward to a Scala community growing here in Pittsburgh! We decided that we need to find a proper meeting place, and we&amp;rsquo;ll start having people give talks, and come up with ideas for a group project to work on.&lt;/p&gt;

&lt;h2 id=&#34;ne-scala-http-nescala-org&#34;&gt;&lt;a href=&#34;http://nescala.org/&#34;&gt;NE Scala&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Also, at the meetup, Josh reminded us that there were still spaces left for &lt;a href=&#34;http://www.meetup.com/nescala/events/97192402/&#34;&gt;registering for NE Scala&lt;/a&gt;. I hadn&amp;rsquo;t actually considered going, because I&amp;rsquo;m already very busy for January and February, but this morning upon waking up, I suddenly decided that maybe I should not pass up this opportunity to go and get the big picture of what the Scala community is up to!&lt;/p&gt;

&lt;p&gt;In a flurry of email exchanges, I ended up registering for the conference with the idea of carpooling with Josh and sharing lodging, then Jamie got in on it too, so the three of us will be heading off to Philadelphia together in March. This will be my first out-of-town travel to a conference since &lt;a href=&#34;http://www.informatik.uni-trier.de/~ley/db/conf/pldi/pldi98.html&#34;&gt;PLDI 1998&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m definitely throwing myself into the Scala world now, with the Pittsburgh Scala meetup going and with my registration for the NE Scala conference.&lt;/p&gt;

&lt;h2 id=&#34;update&#34;&gt;(Update)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;../../blog/2013/02/10/ne-scala-2013-my-first-scala-conference/&#34;&gt;NE Scala 2013 was quite intense&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Review of Coursera&#39;s Fall 2012 &#34;Functional Programming Principles in Scala&#34;</title>
      <link>http://franklinchen.com/blog/2012/11/15/review-of-courseras-fall-2012-functional-programming-principles-in-scala/</link>
      <pubDate>Thu, 15 Nov 2012 21:27:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2012/11/15/review-of-courseras-fall-2012-functional-programming-principles-in-scala/</guid>
      <description>&lt;figure &gt;
    
        &lt;img src=&#34;http://www.scala-lang.org/sites/default/files/newsflash_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In fall of 2012, I completed the initial offering, through &lt;a href=&#34;http://www.coursera.org/&#34;&gt;Coursera&lt;/a&gt;, of &lt;a href=&#34;http://lampwww.epfl.ch/~odersky/&#34;&gt;Martin Odersky&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;http://www.coursera.org/course/progfun&#34;&gt;&amp;ldquo;Functional Programming Principles in Scala&amp;rdquo; online course&lt;/a&gt;, which was held from September 18 through November.&lt;/p&gt;

&lt;p&gt;This is a review of the course, which is planned to be offered again (so those of you who missed it the first time can sign up for the second iteration when it is available).&lt;/p&gt;

&lt;p&gt;Also check out the &lt;a href=&#34;http://docs.scala-lang.org/news/functional-programming-principles-in-scala-impressions-and-statistics.html&#34;&gt;instructor report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-purpose-of-the-course&#34;&gt;The purpose of the course&lt;/h2&gt;

&lt;p&gt;I have noticed very often that people learning to program or to perform some task that involves programming are very fixated on the question of &amp;ldquo;what computer language should I use?&amp;rdquo; or &amp;ldquo;what computer language is the course/project going to use?&amp;rdquo; This is a mistake because what is important in learning programming or getting better at it is not trivial questions of syntax, but matters of &lt;em&gt;understanding&lt;/em&gt; what things mean and having a correct mental model of what is going on. In the end, one has to go back to fundamentals.&lt;/p&gt;

&lt;p&gt;So although this course has &amp;ldquo;Scala&amp;rdquo; in its title, it is really a brief introduction to functional programming, using &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; as one of many possible languages in which to express it.&lt;/p&gt;

&lt;h2 id=&#34;my-background-in-computer-science-and-functional-programming&#34;&gt;My background in computer science and functional programming&lt;/h2&gt;

&lt;p&gt;I am a college graduate with a physics degree who &lt;em&gt;never took a single computer science or programming course in college&lt;/em&gt;, because I found programming to be strange, difficult, and scary, based on &lt;a href=&#34;../../blog/2012/01/16/how-school-made-me-hate-computer-science-and-programming/&#34;&gt;my experiences before college&lt;/a&gt;. I did not take up programming seriously until after college, when I found myself wanting a career change, and took a second look at computer programming.&lt;/p&gt;

&lt;p&gt;As I have mentioned earlier, a &lt;a href=&#34;../../blog/2011/10/25/rip-john-mccarthy-but-lisp-will-never-die/&#34;&gt;turning point in my life&lt;/a&gt; was when a friend recommended to me that I focus not on &amp;ldquo;learning&amp;rdquo; some arbitrary computer language, but on learning the &lt;em&gt;principles&lt;/em&gt; of programming first, after which any specific language could be understood quickly in light of the principles.&lt;/p&gt;

&lt;p&gt;So I learned functional programming through working through &lt;a href=&#34;http://mitpress.mit.edu/sicp/&#34;&gt;The Structure and Interpretation of Computer Programs&lt;/a&gt;, coding up my solutions to the exercises using &lt;a href=&#34;http://gambitscheme.org/&#34;&gt;Gambit Scheme&lt;/a&gt; on a &lt;a href=&#34;http://en.wikipedia.org/wiki/Macintosh_Classic&#34;&gt;Macintosh Classic&lt;/a&gt;. I then learned C and C++ and got my first job as a software engineer.&lt;/p&gt;

&lt;p&gt;The next big jump for me came when I encountered my first statically typed functional languages in around 1995: &lt;a href=&#34;http://caml.inria.fr/caml-light/index.en.html&#34;&gt;Caml Light&lt;/a&gt; and &lt;a href=&#34;http://www.smlnj.org/&#34;&gt;Standard ML&lt;/a&gt; and &lt;a href=&#34;http://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; through &lt;a href=&#34;http://www.haskell.org/hugs/&#34;&gt;Gofer/Hugs&lt;/a&gt;. I was so inspired by the possibilities of &lt;em&gt;improving the programming experience&lt;/em&gt; that I decided to leave my job and apply for graduate school in computer science.&lt;/p&gt;

&lt;p&gt;I was in the &lt;a href=&#34;http://www.csd.cs.cmu.edu/education/phd/&#34;&gt;Carnegie Mellon University CS PhD program&lt;/a&gt; for two years before leaving after 1999. I left for a combination of different reasons, but I am definitely still a believer in the original mission I had before going to graduate school: improving the experience of practical software development by every means necessary.&lt;/p&gt;

&lt;h2 id=&#34;my-plan-overcome-resistance-to-scala&#34;&gt;My plan: overcome resistance to Scala&lt;/h2&gt;

&lt;p&gt;Ironically, what I planned to get out of the course is &lt;em&gt;not&lt;/em&gt; what I expect most students in the course would or &lt;em&gt;should&lt;/em&gt; get out of it! I treated the course as a way to get myself to force myself to use and really learn the Scala language (since I did not need an introduction to functional programming), by solving programming exercises that I probably had done in the past in other languages.&lt;/p&gt;

&lt;p&gt;Scala had been around for years, but I had resisted doing much with it because it seemed very complex and changing all the time and because the tool ecosystem seemed to be immature and not usable for me. That led me to my not investing in the effort to truly read up on it and experiment to use at work.&lt;/p&gt;

&lt;p&gt;I am happy to report that Scala is actually usable now and all my concerns about it are no longer relevant. 2012 seems to me to be the year when Scala became truly usable for general production. (I will report later on my current plans in motion to migrate from Java to Scala at work.)&lt;/p&gt;

&lt;h2 id=&#34;observations-about-the-course&#34;&gt;Observations about the course&lt;/h2&gt;

&lt;h3 id=&#34;installation-of-software&#34;&gt;Installation of software&lt;/h3&gt;

&lt;p&gt;There were initially some glitches when setting up &lt;a href=&#34;http://eclipse.org/&#34;&gt;Eclipse&lt;/a&gt; and &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;, but eventually, an Eclipse distribution made specifically for the class was made available and solved my problems.&lt;/p&gt;

&lt;p&gt;That said, I preferred to use Emacs and SBT for writing code for the course.&lt;/p&gt;

&lt;h3 id=&#34;theoretical-material&#34;&gt;Theoretical material&lt;/h3&gt;

&lt;p&gt;Martin Odersky&amp;rsquo;s lectures were entirely as one would expect in a basic academic course on programming language principles: laying the fundamental mathematical groundwork: operational semantics, structural induction, etc.&lt;/p&gt;

&lt;p&gt;This material can be very dry and abstract, and I have to wonder how many students encountering it for the first time slog through long lectures of this kind of content. Personally, if I were teaching these ideas, I would use less of the typical &amp;ldquo;mathematical&amp;rdquo; kind of example when illustrating them.&lt;/p&gt;

&lt;h3 id=&#34;lecture-format&#34;&gt;Lecture format&lt;/h3&gt;

&lt;p&gt;I was surprised by the scarcity of within-lecture quizzes as checkpoints for the student, because I have completed several Coursera courses in which they were much more frequent (and in my mind useful). I think the course would benefit from breaking up lectures into smaller chunks with more quizzes.&lt;/p&gt;

&lt;h3 id=&#34;programming-assignments&#34;&gt;Programming assignments&lt;/h3&gt;

&lt;p&gt;The programming assignments involved filling in code skeletons in otherwise complete programs that solved some task. Again, the tasks involved seemed typically mathematical and &amp;ldquo;classic&amp;rdquo; in nature, such as anagram solving, Huffman coding and decoding, although there was also an assignment on tweet analysis.&lt;/p&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;I appreciated that the assignments were distributed as self-contained SBT projects, along with rudimentary &lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;-style test suites, run through &lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt; that one could add to. I get the impression that many courses on programming do not address the issue of testing at all, with the result that students flail while copying and pasting code in some IDE or REPL instead of adopting an automated testing discipline that not only decreases frustration but will prove to be a real-life practice to be used in their studies and careers.&lt;/p&gt;

&lt;p&gt;It was great to have these programming assignments distributed as complete deploy able projects. I actually looked at the non-assignment-relevant code and configurations in order to learn more about real-life SBT and Scala use for my own plans to migrate from Java to Scala at work.&lt;/p&gt;

&lt;h3 id=&#34;scala-the-language&#34;&gt;Scala the language&lt;/h3&gt;

&lt;p&gt;Scala is introduced at first as a kind of standard functional language (even though in reality Scala&amp;rsquo;s functions are actually objects). Algebraic data types are introduced through Scala&amp;rsquo;s object encoding as &lt;code&gt;case class&lt;/code&gt; in a hierarchy. I think the instructor did a good job in illustrating through example how Scala manages to blend the traditional functional and object worlds in a single language, while emphasizing the functional aspects.&lt;/p&gt;

&lt;h3 id=&#34;most-interesting&#34;&gt;Most interesting&lt;/h3&gt;

&lt;p&gt;For me, the most interesting aspect of the course and assignments was the focus on using Scala&amp;rsquo;s &amp;ldquo;for comprehension&amp;rdquo; syntactic sugar to write very concise and clear code. An entire week of lectures was focused on collections and explained how the syntactic sugar is translated into &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt;. With the popularity of comprehension or similar syntax in many languages these days, I think it is very important to make sure that everyone knows that it is not just magic, but is just syntactic sugar for the important concepts that underlie it. I think the course did a good job in illustrating how comprehensions can be used not only for lists, but for many other types as well, and types that one can define oneself (Scala&amp;rsquo;s comprehension syntax is meant for any &lt;a href=&#34;http://en.wikipedia.org/wiki/Monad_(functional_programming)&#34;&gt;monad&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;update-of-2013-02-27&#34;&gt;(Update of 2013-02-27)&lt;/h4&gt;

&lt;p&gt;I just saw a good recent expository example of &lt;a href=&#34;http://tmorris.net/posts/memoisation-with-state-using-scala/index.html&#34;&gt;the use of comprehension syntax to simplify the look of code that involves writing your own monad&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I strongly recommend Martin Odersky&amp;rsquo;s &amp;ldquo;Functional Programming Principles in Scala&amp;rdquo; course to all who are interested in understanding the basics behind programming language semantics and how to apply this knowledge in writing and reasoning about clear, elegant programs to solve problems. A course like this could be taught using any number of languages as a vehicle, but I think Scala works particularly well because it is a JVM-based language that interoperates seamlessly with Java and Java&amp;rsquo;s entire tool chain, so anything you learn here, you can apply immediately in real-life work if you already operate in the JVM-based programming world. Scala is not a toy language, but is used at &lt;a href=&#34;http://twitter.github.com/scala_school/&#34;&gt;Twitter&lt;/a&gt; and many other enterprises that require reliability, performance, scalability while solving very complex problems.&lt;/p&gt;

&lt;p&gt;A final reminder: if you missed this free course the first time around, by all means check it out when it is offered again!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The start of a local Haskell study group</title>
      <link>http://franklinchen.com/blog/2012/11/05/the-start-of-a-local-haskell-study-group/</link>
      <pubDate>Mon, 05 Nov 2012 09:23:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2012/11/05/the-start-of-a-local-haskell-study-group/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://www.haskell.org/wikiupload/4/4a/HaskellLogoStyPreview-1.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Haskell logo&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Recently, I had a conversation with &lt;a href=&#34;http://billlaboon.com/&#34;&gt;Bill&lt;/a&gt;, who was asking about resources for learning more about functional programming. I did some serious thinking about how to advise, but eventually decided to recommend that he use the &lt;a href=&#34;http://haskell.org/&#34;&gt;Haskell&lt;/a&gt; programming language as a vehicle for getting into the theory and practice of functional programming.&lt;/p&gt;

&lt;p&gt;(To fans of &lt;a href=&#34;http://en.wikipedia.org/wiki/Standard_ML&#34;&gt;Standard ML&lt;/a&gt; or &lt;a href=&#34;http://caml.inria.fr/&#34;&gt;Caml&lt;/a&gt; or &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; or &lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure&lt;/a&gt; or &lt;a href=&#34;http://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; or other languages: I will explain my rationale later.)&lt;/p&gt;

&lt;p&gt;Also, I recommended a particular tutorial as a decent starting point: a book available online called &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;&amp;ldquo;Learn You a Haskell for Great Good!&amp;rdquo;&lt;/a&gt; (seriously).&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;http://billlaboon.com/learning-myself-a-haskell-for-great-good/&#34;&gt;Bill got going&lt;/a&gt; and &lt;a href=&#34;http://www.chrisumbel.com/&#34;&gt;Chris&lt;/a&gt; joined us, Bill set up a Google Group to make discussion easier. If you&amp;rsquo;re interested in joining the study group, let us know!&lt;/p&gt;

&lt;h2 id=&#34;a-project-setup&#34;&gt;A project setup&lt;/h2&gt;

&lt;p&gt;Meanwhile, one of my first suggestions so far to the participants has been to get a decent serious development setup beyond just using the REPL for experimentation. In particular, as a proponent of &lt;a href=&#34;http://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test-Driven Development&lt;/a&gt;, I believe that anyone learning a new programming language should be given the tools to immediately get a serious process going, even if only to solve trivial problems.&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&#34;http://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt; was brought up as a source of little programming exercises to solve, I decided to create a project structure with (currently) one solved problem and a test file using &lt;a href=&#34;http://hunit.sourceforge.net/&#34;&gt;HUnit&lt;/a&gt; and &lt;a href=&#34;http://batterseapower.github.com/test-framework/&#34;&gt;test-framework&lt;/a&gt; as a template one can use to set up a complete development process.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the link to my &lt;a href=&#34;http://github.com/FranklinChen/project-euler-haskell&#34;&gt;&lt;code&gt;project-euler-haskell&lt;/code&gt; on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Comments and participation are welcome!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A short example of why I prefer static typing: learning Gradle</title>
      <link>http://franklinchen.com/blog/2012/09/24/a-short-example-of-why-i-prefer-static-typing-learning-gradle/</link>
      <pubDate>Mon, 24 Sep 2012 17:07:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2012/09/24/a-short-example-of-why-i-prefer-static-typing-learning-gradle/</guid>
      <description>&lt;p&gt;I make no secret of the fact the I prefer to program in &lt;a href=&#34;http://en.wikipedia.org/wiki/Programming_language#Static_versus_dynamic_typing&#34;&gt;statically-typed languages&lt;/a&gt;. That is not to say that I don&amp;rsquo;t write programs in dynamically typed languages. In fact, I have written and will continue to write programs in &lt;a href=&#34;../../categories/perl/&#34;&gt;Perl&lt;/a&gt;, &lt;a href=&#34;../../categories/python/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;../../categories/ruby/&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;../../categories/javascript/&#34;&gt;JavaScript&lt;/a&gt;, and other dynamically typed programs, because pragmatically speaking, there is a whole lot more to programming to get something done than questions of &lt;a href=&#34;http://en.wikipedia.org/wiki/Type_system&#34;&gt;type systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nevertheless, it is always painful to me when I hit a wall when learning and using an unfamiliar API from a dynamically typed language. I always think, &amp;ldquo;if only this API were statically typed, so that when I encounter an error, I can immediately look up what went wrong&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example as I&amp;rsquo;ve been learning &lt;a href=&#34;http://www.gradle.org/&#34;&gt;Gradle&lt;/a&gt; while evaluating it along with learning &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt;, as two candidate build tools for me to switch to out of &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; as my build tool for a primarily Java-based project. Note that Gradle is basically an embedded domain-specific language using the dynamically typed language &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt;, while SBT is an embedded domain-specific language using the statically typed language &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;code-example&#34;&gt;Code example&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a code example from a book I&amp;rsquo;ve been going through while studying Gradle, &lt;a href=&#34;http://gradleware.com/registered/books/building-and-testing/&#34;&gt;&amp;ldquo;Building and Testing with Gradle&amp;rdquo;&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&#34;example-3-21-use-the-ant-path-references-inside-the-gradle-build&#34;&gt;Example 3.21. Use the Ant path references inside the Gradle build&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;ant&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;importBuild&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;build.xml&amp;#39;&lt;/span&gt;

defaultTasks &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;gradleBuild&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;////////////////////////////////////////////////////////////////////////&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Gradle paths retrieved from Ant and then built using a Gradle task&lt;/span&gt;
repositories &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    flatDir &lt;span style=&#34;color: #A0A000&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;localRepository1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;dirs:&lt;/span&gt; ant&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;references&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;antPathToLibs1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
    flatDir &lt;span style=&#34;color: #A0A000&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;localRepository2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;dirs:&lt;/span&gt; ant&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;references&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;antPathToLibs2&lt;/span&gt;
    flatDir &lt;span style=&#34;color: #A0A000&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;localRepository3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;dirs:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;antlibs&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

task gradleBuild &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Set classpath to include the JAR&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The repositories bridged from Ant to Gradle are:&amp;quot;&lt;/span&gt;
    println repositories&lt;span style=&#34;color: #666666&#34;&gt;*.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;name&lt;/span&gt;

    println repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository1&lt;/span&gt;

    println repositories&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;localRepository2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 class = &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 name = &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;name&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 latest = &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;latest&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 ivyPatterns = &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;ivyPatterns&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 artifactPatterns =&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;       &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;artifactPatterns&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 checkconsistency =&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;       &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;checkconsistency&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 m2compatible =&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;       &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;m2compatible&lt;/span&gt;
    println &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localRepository3 methods =&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;       &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; repositories&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;localRepository3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;metaClass&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;unique&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;error-output&#34;&gt;Error output&lt;/h2&gt;

&lt;p&gt;Unfortunately, this Gradle build file, when executed under the current version of Gradle, dies with an error:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;$&lt;/span&gt; ./run-example.bsh
&lt;span style=&#34;color: #888888&#34;&gt;:gradleBuild&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;The repositories bridged from Ant to Gradle are:&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;[localRepository1, localRepository2, localRepository3]&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository_Decorated@7f205d8d&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository_Decorated@5eef2e7c&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;localRepository3 class = class org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository_Decorated&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;localRepository3 name = localRepository3&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;:gradleBuild FAILED&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;FAILURE: Build failed with an exception.&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;* Where:&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Build file &amp;#39;oreilly-gradle-book-examples/ant-classpathanttogradle/build.gradle&amp;#39; line: 24&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;* What went wrong:&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Execution failed for task &amp;#39;:gradleBuild&amp;#39;.&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; Could not find property &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt; on org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository_Decorated@8c1e4d5.

&lt;span style=&#34;color: #888888&#34;&gt;* Try:&lt;/span&gt;
&lt;span style=&#34;color: #888888&#34;&gt;Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.&lt;/span&gt;

&lt;span style=&#34;color: #888888&#34;&gt;BUILD FAILED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;After much searching online, I still could not figure out what properties are supposed to be available from &lt;code&gt;repositories.localRepository3&lt;/code&gt;. I looked at the &lt;a href=&#34;http://www.gradle.org/docs/current/javadoc/overview-tree.html&#34;&gt;Gradle documentation&lt;/a&gt;, and I looked up the package &lt;a href=&#34;http://www.gradle.org/docs/current/javadoc/org/gradle/api/artifacts/repositories/package-tree.html&#34;&gt;&lt;code&gt;org.gradle.api.internal.artifacts.repositories&lt;/code&gt;&lt;/a&gt; without success.&lt;/p&gt;

&lt;p&gt;Gradle&amp;rsquo;s API has changed since the publication of the book, obviously. And in fact, I have been submitting &lt;a href=&#34;https://github.com/gradleware/oreilly-gradle-book-examples/commit/351f31f1cdede84233b977e67031720177144aab&#34;&gt;GitHub pull requests&lt;/a&gt; as I update the code examples while encountering apparent changes. But sometimes, as in this case, it has been too confusing for me to figure out how to update the code. You could say that this is always the case for any code in any language, but what bothers me is the nature of error messages and documentation in APIs for dynamically typed languages such as Groovy. These experiences remind me that &lt;em&gt;types are documentation&lt;/em&gt;, that &lt;em&gt;types are a way for a programmer to tell the world how code is supposed to be used&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Gradle seems to be a promising build tool, and I will continue to evaluate it while skipping over the particular mysterious error I encountered (since it is not really relevant to what I want to do in my builds), but I wish I could have better figured out what went wrong with the book&amp;rsquo;s code example. Meanwhile, it remains to be seen what kinds of problems I will encounter when using SBT. Again, I have to emphasize that my goal is to get things done, correctly and efficiently. Whatever works best, I will use, whatever its drawbacks: in another project, I happily used &lt;a href=&#34;../../categories/scons/&#34;&gt;SCons&lt;/a&gt; as a build tool, based on the dynamically typed language Python, and of course, I have used &lt;a href=&#34;http://rake.rubyforge.org/&#34;&gt;Rake&lt;/a&gt; for Ruby projects.&lt;/p&gt;

&lt;h3 id=&#34;update-of-2015-05-18&#34;&gt;(Update of 2015-05-18)&lt;/h3&gt;

&lt;p&gt;Wow, that was written in fall of 2012.&lt;/p&gt;

&lt;p&gt;Since then, I have heavily used SBT from then to the present first for Java, then for Scala, which &lt;a href=&#34;http://franklinchen.com/blog/2013/01/11/2013-is-my-year-of-scala/&#34;&gt;became my main programming language in early 2013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, in early 2015, &lt;a href=&#34;http://blog.pivotal.io/pivotal/news-2/groovy-2-4-and-grails-3-0-to-be-last-major-releases-under-pivotal-sponsorship&#34;&gt;Pivotal got out of the Groovy business&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, in early 2015 as I adopted Haskell as my main language for new projects, I switched away from SCons as a general-purpose build tool to Haskell-based &lt;a href=&#34;http://shakebuild.com/&#34;&gt;Shake&lt;/a&gt;, which works really great for me.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>