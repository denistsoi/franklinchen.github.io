<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teaching on Franklin Chen</title>
    <link>http://franklinchen.com/categories/teaching/atom/index.xml</link>
    <description>Recent content in Teaching on Franklin Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://franklinchen.com/categories/teaching/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why I stopped saying something is easy or something is hard</title>
      <link>http://franklinchen.com/blog/2014/12/23/why-i-stopped-saying-something-is-easy-or-something-is-hard/</link>
      <pubDate>Tue, 23 Dec 2014 22:19:38 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2014/12/23/why-i-stopped-saying-something-is-easy-or-something-is-hard/</guid>
      <description>&lt;p&gt;Recently, I decided to monitor how I talk about learning some subject or topic, because of observing both of myself and other people what our reactions can be if I say that something is &amp;ldquo;easy&amp;rdquo; or something is &amp;ldquo;hard&amp;rdquo;. I&amp;rsquo;ve come to the conclusion that there are serious drawbacks to saying that something is &amp;ldquo;easy&amp;rdquo; or &amp;ldquo;hard&amp;rdquo;, and an entirely different vocabulary should be used in helping a learner. I haven&amp;rsquo;t figured out exactly what that vocabulary is, but I&amp;rsquo;ve seen too many times some really disastrous results from overusing labels such as &amp;ldquo;easy&amp;rdquo; or &amp;ldquo;hard&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-easy-anyway&#34;&gt;What&amp;rsquo;s &amp;ldquo;easy&amp;rdquo; anyway?&lt;/h2&gt;

&lt;p&gt;I never learned to drive stick shift in my youth. Therefore, when in recent years Abby tried to teach me to, I had a lot of trouble. She became impatient with me and started using phrases like &amp;ldquo;but it&amp;rsquo;s easy, you just do this&amp;rdquo;. These phrases were delivered in a way that sounded frustrated, and meanwhile, I &lt;em&gt;knew&lt;/em&gt; it wasn&amp;rsquo;t &amp;ldquo;easy&amp;rdquo;, else I would be getting it. I finally gave up, giving the excuse that it wasn&amp;rsquo;t worth the trouble to go through hell to get this skill working, since my own car is an automatic anyway and I would have very little opportunity or reason to drive stick shift. But the real point is that learning became very stressful for me as I had to fight not only my multitasking physical clumsiness, but also this idea that I wasn&amp;rsquo;t able to do something &amp;ldquo;easy&amp;rdquo;. Part of me knew that &lt;em&gt;rationally&lt;/em&gt;, I shouldn&amp;rsquo;t care about labels, but part of me also kept on saying silently, &amp;ldquo;You have no idea how hard this is for me. This is how you started learning to drive. You have no idea what I&amp;rsquo;m going through.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I remember many other situations through my life where I was struggling with something supposedly &amp;ldquo;easy&amp;rdquo; and became very discouraged. In my youth, I may not have had quite as much metacognition to recognize that I shouldn&amp;rsquo;t necessarily give up (and I didn&amp;rsquo;t always give up), so it was particularly damaging when made fun of for not immediately grasping something &amp;ldquo;easy&amp;rdquo;, whether hitting a ball with a bat or racket, speaking English fluently, or using perfect grammar in my writing. In some cases, where I persevered, I not only &amp;ldquo;caught up&amp;rdquo; (there&amp;rsquo;s always some sense of &amp;ldquo;comparison&amp;rdquo; when someone uses the word &amp;ldquo;easy&amp;rdquo;), but excelled. In other cases, I just gave up, for decades (basically, anything athletic, I gave up before I finished elementary school), the shame was so great at being crappy at something &amp;ldquo;easy&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;There was even a perverse overreaction that sometimes kicked in. If I couldn&amp;rsquo;t do something &amp;ldquo;easy&amp;rdquo; (like draw in art class), I did the &amp;ldquo;sour grapes&amp;rdquo; thing and declared the subject stupid and not worth my time. I turned around and used &amp;ldquo;easy&amp;rdquo; as an excuse to make fun of those who could do it. And that leads to the dual problem of saying something is &amp;ldquo;hard&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;what-s-hard&#34;&gt;What&amp;rsquo;s &amp;ldquo;hard&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;A harmful effect of the &amp;ldquo;easy&amp;rdquo;/&amp;ldquo;hard&amp;rdquo; classification is that it encourages us to play stupid status games in which nobody wins and everyone is hurt.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example: it turned out that growing up, I found math &amp;ldquo;easy&amp;rdquo;. As a result, math became a convenient way for me to stay lazy about my perseverance and will to improve. I considered math, which was considered by many to be &amp;ldquo;hard&amp;rdquo;, as a way for me to impress and get approval (from those who thought math was &amp;ldquo;hard&amp;rdquo;). So I didn&amp;rsquo;t work very hard at math. Meanwhile, I just &amp;ldquo;gave up&amp;rdquo; on art and gym classes. I didn&amp;rsquo;t even try. All this because I got the idea that I was only punished for failing at stuff that was &amp;ldquo;easy&amp;rdquo; but rewarded for doing well at what was &amp;ldquo;hard&amp;rdquo;. I gravitated toward all kinds of &amp;ldquo;hard&amp;rdquo; academic subjects, for the sole purpose of boosting my self-esteem. This was a big mistake in the long run. Note that these subjects were not necessarily the ones that I was passionate about, or even truly talented at. They were they ones that somehow presented themselves as the &amp;ldquo;biggest prizes&amp;rdquo; and so I either secretly underworked at something I found easy or I put an inordinate amount of work into something &amp;ldquo;hard&amp;rdquo; for the wrong reasons.&lt;/p&gt;

&lt;p&gt;Meanwhile, I saw my peers give up on all kinds of pursuits when by middle school it became apparent that some subjects were getting &amp;ldquo;harder&amp;rdquo; than others for them. This was sad. Often there was no rhyme or reason to what seemed &amp;ldquo;hard&amp;rdquo; or not: bad luck with a single terrible teacher in some random subject, for example, had massive impacts on the life paths of many of us. Whether it was a music class or one particular favored sport or game, I saw discouragement and disillusionment everywhere among everyone.&lt;/p&gt;

&lt;p&gt;So marking something as &amp;ldquo;hard&amp;rdquo; not only discourages some people, but encourages others to play the game of racking up points solely by focusing on excelling at the &amp;ldquo;hard&amp;rdquo; for the sake of competition. This is such a waste.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution?&lt;/h2&gt;

&lt;p&gt;Years of experience in learning many things I once thought were too hard for me have convinced me that every learner is different, and needs different motivations, contexts, kinds of help in order to achieve personal goals. In particular, not everyone is &amp;ldquo;ready&amp;rdquo; at any given time for something yet. And learning may come in unexpected spurts, sometimes sudden insight that comes after having been given enough encouragement to persist for a while even while struggling.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not saying that learners cannot be irresponsible and lazy (I certainly sometimes am), but teachers should be aware that calling things &amp;ldquo;easy&amp;rdquo; or &amp;ldquo;hard&amp;rdquo; as a way to shame or encourage may well completely backfire, and there have to be better ways to concretely help learners make incremental progress at their own pace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think about your own learning and teaching experiences. Do you remember particularly negative or positive ones? How many involved some kind of &amp;ldquo;easy&amp;rdquo;/&amp;ldquo;hard&amp;rdquo; talk that caused demotivation? Or are you one who thrives on such labels, using them as a challenge?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoughts on giving up an old project to make room for the new</title>
      <link>http://franklinchen.com/blog/2014/12/15/thoughts-on-giving-up-an-old-project-to-make-room-for-the-new/</link>
      <pubDate>Mon, 15 Dec 2014 20:10:34 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2014/12/15/thoughts-on-giving-up-an-old-project-to-make-room-for-the-new/</guid>
      <description>

&lt;p&gt;Today I made a difficult decision to give up doing something that I have enjoyed for well &lt;a href=&#34;../../blog/2013/09/12/my-first-post-on-the-chess-improver-the-value-of-thematic-complete-games-against-a-weaker-opponent/&#34;&gt;over a year now&lt;/a&gt;: writing a &lt;a href=&#34;http://chessimprover.com/category/franklin-chen/&#34;&gt;weekly chess column&lt;/a&gt; at &lt;a href=&#34;http://chessimprover.com/&#34;&gt;The Chess Improver&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;writing&#34;&gt;Writing&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s been a major commitment coming up with something to write about every week for such a long time. There have been times when I was overflowing with ideas; there have been times when I struggled to come up with something to write about that I could stand behind. Sometimes I have published something I felt was particularly good; sometimes I felt uninspired; sometimes I just dashed something out of uneven quality. But through it all, I learned a lot from my attempt to convey &lt;em&gt;something specific and concrete&lt;/em&gt; that I hoped readers would enjoy and ideally even use to their practical advantage in their own chess play. The best way to verify whether you actually understand something is to write about it! I definitely had to do homework in many cases in order to make sure I really understood what I was talking about, in order to be as accurate and correct as I could.&lt;/p&gt;

&lt;p&gt;I even kept on writing about chess during very dry spells in my writing in general, when I wasn&amp;rsquo;t writing anything for my other two blogs, this personal blog and my &lt;a href=&#34;http://ConscientiousProgrammer.com/&#34;&gt;programming blog&lt;/a&gt;. I admit to being rather embarrassed that during these dry spells, I kept on posting links to my chess blog from this blog. I will never again waste readers&amp;rsquo; time by posting links from one blog to another except when relevant.&lt;/p&gt;

&lt;h2 id=&#34;the-law-of-conservation-of-time-and-energy&#34;&gt;The law of conservation of time and energy&lt;/h2&gt;

&lt;p&gt;In our lives, we can&amp;rsquo;t do it all. For 2015, recent circumstances have led me to commit to a bunch of personal projects that have nothing to do with chess, so I knew, as 2014 comes to a close, that I would have to give up something &lt;em&gt;old&lt;/em&gt; in order to free up time and energy for the &lt;em&gt;new&lt;/em&gt;. I&amp;rsquo;m going to writing up a retrospective on 2014 before 2015 comes, in order to plan out how to go about 2015.&lt;/p&gt;

&lt;h2 id=&#34;it-s-not-really-giving-up&#34;&gt;It&amp;rsquo;s not really giving up&lt;/h2&gt;

&lt;p&gt;I lied in my title. I&amp;rsquo;m not really &amp;ldquo;giving up&amp;rdquo; chess writing; I&amp;rsquo;m just putting it aside. If a time comes when I feel it is worthwhile to do it again, I may well return. However, for now, I&amp;rsquo;m shutting it down.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All things come to an end, or at least, an adjournment. I look forward to tackling new challenges as I free myself from the responsibility of writing a weekly chess column.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you rearrange your life when you decide to start new demanding projects? Do you try to squeeze them in and cut out &amp;ldquo;non-essentials&amp;rdquo; or optimize your efficiency? Or do you decide that you have to cut out significant old projects? Or do you feel that you are already stretched to the limit with essentials (such as young children) and cannot possibly take on anything new?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to respond if a child asks you a science question you don&#39;t know the answer to</title>
      <link>http://franklinchen.com/blog/2012/01/19/how-to-respond-if-a-child-asks-you-a-science-question-you-dont-know-the-answer-to/</link>
      <pubDate>Thu, 19 Jan 2012 22:28:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2012/01/19/how-to-respond-if-a-child-asks-you-a-science-question-you-dont-know-the-answer-to/</guid>
      <description>&lt;p&gt;Today, I was very sad to see a news article &lt;a href=&#34;http://www.bbc.co.uk/news/education-16612100&#34;&gt;&lt;strong&gt;Children&amp;rsquo;s science questions &amp;ldquo;stump many parents&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;. I was &lt;em&gt;not&lt;/em&gt; sad for any of the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oh no, kids these days are receiving a poor science education!&lt;/li&gt;
&lt;li&gt;Oh no, the parents received a poor science education when they were young!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was sad because of many of the parents&amp;rsquo; reactions to their children&amp;rsquo;s questions:&lt;/p&gt;

&lt;blockquote&gt;
...16% told their children to ask their partner and a fifth made up a response or pretended that no one knew the answer.
&lt;/blockquote&gt;

&lt;p&gt;What are some better alternative responses?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-first-step-to-acting-like-a-scientist-not-knowing&#34;&gt;The first step to acting like a scientist: not knowing&lt;/h2&gt;

&lt;p&gt;One obvious response that is already by itself profoundly adequate would be to say &lt;strong&gt;&amp;ldquo;I don&amp;rsquo;t know&amp;rdquo;&lt;/strong&gt;. So easy, so honest, yet many parents refused to use this response. But a parent who replied even in only this minimalist way would be teaching some very important lessons about science:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Science begins with &lt;em&gt;not knowing&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Science is about being &lt;em&gt;honest&lt;/em&gt; about reality and about oneself; it is about deliberately restricting one&amp;rsquo;s ego, recognizing one&amp;rsquo;s limitations, and acknowledging ignorance.&lt;/li&gt;
&lt;li&gt;Science proceeds with &lt;em&gt;asking&lt;/em&gt;. The child by asking should be commended for asking, rather than implicitly punished or evaded for possibly embarrassing the parent.&lt;/li&gt;
&lt;li&gt;Science proceeds with &lt;em&gt;trying&lt;/em&gt; to find out.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-second-step-to-acting-like-a-scientist-looking-for-an-answer&#34;&gt;The second step to acting like a scientist: looking for an answer&lt;/h2&gt;

&lt;p&gt;Regarding trying to find out, here is another quote from the article:&lt;/p&gt;

&lt;blockquote&gt;
About a third of parents said they actively researched answers to their children&#39;s inquiries. 
&lt;/blockquote&gt;

&lt;p&gt;It would be possible to stop here and praise these parents.&lt;/p&gt;

&lt;p&gt;But as phrased, this response is not satisfactory either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Science is not about looking up an &lt;em&gt;answer&lt;/em&gt; somewhere, as one might look up a baseball statistic.&lt;/li&gt;
&lt;li&gt;How involved were the children in obtaining the &amp;ldquo;answer&amp;rdquo;? Did the parents fetch the &amp;ldquo;answer&amp;rdquo; and hand it over? Or did the children get actively involved in looking for the answer?&lt;/li&gt;
&lt;li&gt;Science is not about sitting back and getting an answer from someone.&lt;/li&gt;
&lt;li&gt;Science is not really about answers at all. It is a &lt;em&gt;mindset&lt;/em&gt;, a &lt;em&gt;process&lt;/em&gt; of looking for an answer, and looking for ways to evaluate possible answers for adequacy and some measure of confidence. It is above all a &lt;em&gt;way of life&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-third-step-to-acting-like-a-scientist-being-wrong&#34;&gt;The third step to acting like a scientist: being wrong&lt;/h2&gt;

&lt;p&gt;Sometimes one settles on an answer, and then later decides it is unsatisfactory. What then?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Science is not about being right.&lt;/li&gt;
&lt;li&gt;Science is often about saying &lt;strong&gt;&amp;ldquo;I was wrong&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-third-step-to-acting-like-a-scientist-uncertainty&#34;&gt;The third step to acting like a scientist: uncertainty&lt;/h2&gt;

&lt;p&gt;Eventually even the notion of &amp;ldquo;answer&amp;rdquo; must be considered flawed. We are never &lt;em&gt;certain&lt;/em&gt; about our theories. Our theories are based on &lt;em&gt;models&lt;/em&gt; that we invent. The models can have explanatory or predictive power or practical applications, but they themselves are transient. The scientific models from two centuries ago are very different from the scientific models of thirty years ago, and the scientific models of today are very different from the scientific models of thirty years ago. What we believed to be the &amp;ldquo;answer&amp;rdquo; thirty years ago looks today to have been an error.&lt;/p&gt;

&lt;p&gt;And unless we believe that we are near the &amp;ldquo;end of science&amp;rdquo; (I do not believe this for a moment), we must also take into consideration the plausibility that thirty years from now, we will laugh at the currently favored scientific models of today the way we laugh at the hair and clothing styles of the 1980s.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Science is about saying &lt;strong&gt;&amp;ldquo;I am not sure&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The best thing that everyone could learn about science, whether one is young or old, child or parent, is what its true nature is: a way of thinking, a way of acting, a way of living. It is not about &amp;ldquo;facts&amp;rdquo; to accumulate, or jargon to memorize.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How school made me hate computer science and programming</title>
      <link>http://franklinchen.com/blog/2012/01/16/how-school-made-me-hate-computer-science-and-programming/</link>
      <pubDate>Mon, 16 Jan 2012 19:57:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2012/01/16/how-school-made-me-hate-computer-science-and-programming/</guid>
      <description>&lt;p&gt;Some months ago, when the legendary computer scientist &lt;a href=&#34;http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)&#34;&gt;John McCarthy&lt;/a&gt; died, I wrote a blog post in which I briefly reminisced about the way &lt;a href=&#34;../../blog/2011/10/25/rip-john-mccarthy-but-lisp-will-never-die/&#34;&gt;I hated computer programming before I came to love it&lt;/a&gt;. Today I am filling in some more details about how school (elementary school through college) made me fear, misunderstand, and hate computer science and programming. I am inspired to do this because&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just a few weeks ago, I came across an old article from 1992 by someone who had a similar experience, and I wanted to complete my story. Although my story also goes back more than two decades, I feel that the same fundamental stumbling blocks exist to &lt;a href=&#34;../../blog/2011/12/09/why-everyone-should-learn-computer-science/&#34;&gt;the universal computational competence that I now advocate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The topic of learning &amp;ldquo;coding&amp;rdquo; has exploded into the popular media, with hundreds of thousands of people having signed up for &lt;a href=&#34;http://codeyear.com/&#34;&gt;Code Year&lt;/a&gt; and even New York Mayor Bloomberg stating that &lt;a href=&#34;http://www.businessinsider.com/mike-bloomberg-pledges-to-learn-to-code-on-codecademy-this-year-2012-1&#34;&gt;he has signed up&lt;/a&gt; for the free &lt;a href=&#34;http://codecademy.com/&#34;&gt;Codecademy&lt;/a&gt; online tutorial courses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My goals in telling my story:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want to raise awareness among those who might this year be jumping into &amp;ldquo;coding&amp;rdquo; that they might encounter the same kinds of stumbling blocks that discouraged me at first, so that they don&amp;rsquo;t prematurely jump to such conclusions as &amp;ldquo;programming is boring and confusing&amp;rdquo; or &amp;ldquo;programming requires special talent I don&amp;rsquo;t have&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;I want for educators to take note of the barriers facing students who may not be &amp;ldquo;naturals&amp;rdquo; to understanding computation or writing computer programs in the context of currently common programming environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a forthcoming article, I will engage in a severe critique of the &lt;a href=&#34;http://codecademy.com/&#34;&gt;Codeacademy&lt;/a&gt; lessons I have so far examined and gone through, while helping my wife learn programming from scratch.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;6th-grade-and-basic-in-the-early-1980s&#34;&gt;6th grade and BASIC in the early 1980s&lt;/h2&gt;

&lt;p&gt;When I was in middle school in the 6th grade, my math teacher was crazy about computers. He was convinced that his best math students, including me, should learn computer programming. I was basically coerced into staying after school for sessions in which he taught us to program in BASIC for the &lt;a href=&#34;http://en.wikipedia.org/wiki/TRS-80&#34;&gt;TRS-80 microcomputer&lt;/a&gt;. The BASIC language was very primitive. We used line numbers and &lt;code&gt;GOTO&lt;/code&gt;. Some boys got totally into programming, and tried writing video games. I was not one of them. I was not a natural at programming. I will admit it: I never really understood &lt;code&gt;GOSUB&lt;/code&gt; or &lt;code&gt;PEEK&lt;/code&gt; or &lt;code&gt;POKE&lt;/code&gt; at the time. In fact, one beautiful spring day, since it was nice outside, I decided to simply walk home from school instead of staying around for his class. After missing a couple of sessions, I was shocked that he contacted my parents and basically made me continue on. I finished out the year, then never wrote a BASIC program again (until college).&lt;/p&gt;

&lt;p&gt;I did like playing computer games, however. I just had no interest in making them.&lt;/p&gt;

&lt;h2 id=&#34;7th-grade-and-pac-man&#34;&gt;7th grade and Pac-Man&lt;/h2&gt;

&lt;p&gt;In the 7th grade, I was crazy about video games and my sister and I managed to save enough allowance money to buy an &lt;a href=&#34;http://en.wikipedia.org/wiki/Atari_2600&#34;&gt;Atari 2600&lt;/a&gt; video game console. I had encountered an IBM PC by then, but had no interest in it.&lt;/p&gt;

&lt;h2 id=&#34;9th-grade-and-my-first-programming-class&#34;&gt;9th grade and my first programming class&lt;/h2&gt;

&lt;p&gt;When I started high school in the 9th grade, there was a requirement that all students take a semester of &amp;ldquo;computer literacy&amp;rdquo;. After several meetings of that class, I wanted out. We were shown slides of tape drives, told about bits and bytes, and I had no interest whatsoever in any of that. I heard that there was a way out of the requirement, which was to take an actual computer programming class. Since my father was working as a mainframe programmer (his degree in information sciences being from the 1970s), he suggested I take &lt;a href=&#34;http://en.wikipedia.org/wiki/COBOL&#34;&gt;COBOL&lt;/a&gt;, which were offered by my high school (in addition to &lt;a href=&#34;http://en.wikipedia.org/wiki/Fortran&#34;&gt;Fortran&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/IBM_RPG&#34;&gt;RPG&lt;/a&gt; and probably others I don&amp;rsquo;t remember).&lt;/p&gt;

&lt;p&gt;I switched to the COBOL class. Here we learned about pseudocode, used &lt;a href=&#34;http://www.retroist.com/2009/01/11/ibm-flowcharting-template/&#34;&gt;flowchart templates&lt;/a&gt; to draw symbols on paper, wrote our programs out in pencil, and used the big keypunch machine to punch out our programs. Every day we had the opportunity to submit a punch card deck to the teacher (with the appropriate job control and compiler cards) to drop off for overnight processing at some mainframe somewhere.&lt;/p&gt;

&lt;p&gt;I hated the class. The whole rigid process we were supposed to go through, the verbosity of the COBOL language, and the nature of the programs we wrote, made computing seem very boring. I started not doing any homework, and after several weeks, I was failing the class, and the teacher called my parents.&lt;/p&gt;

&lt;p&gt;I dutifully caught up on all the missing programming projects, got my A in the class, and then never touched COBOL again, and forgot any COBOL I &lt;em&gt;pretended&lt;/em&gt; to learn while basically copying and pasting from example programs in the textbook and modifying stuff until it &amp;ldquo;worked&amp;rdquo;. I have a confession to make: despite my A in the class, I never really understood COBOL or programming. I was just going through the motions. It was truly &lt;a href=&#34;http://en.wikipedia.org/wiki/Cargo_cult_programming&#34;&gt;&lt;em&gt;cargo-cult programming&lt;/em&gt;&lt;/a&gt;. &lt;strong&gt;This is a warning to all educators to actually verify whether someone has learned something, as opposed to cleverly faked it!&lt;/strong&gt; (I will come to this subject again.)&lt;/p&gt;

&lt;h2 id=&#34;10th-grade-and-pascal&#34;&gt;10th grade and Pascal&lt;/h2&gt;

&lt;p&gt;In the 10th grade (in a new high school), my math teacher made it mandatory to write some rudimentary programs in Pascal to illustrate the trigonometry and other stuff we were learning. We used the MacPascal interpreter on the Macintosh for this purpose: there was a computer lab where we did our work and printed out our programs and results. I have almost no memory of any of this except that I was intrigued by the automatic formatting and the proportional fonts in MacPascal.&lt;/p&gt;

&lt;p&gt;I should note that at this time in my life, I had no interest in computers. We still did not have one at home, and I had long since outgrown the Atari video game console.&lt;/p&gt;

&lt;h2 id=&#34;11th-grade-and-advanced-placement-computer-science&#34;&gt;11th grade and Advanced Placement computer science&lt;/h2&gt;

&lt;p&gt;In the 11th grade, I had the opportunity to take an Advanced Placement course in computer science, taught using the &lt;a href=&#34;http://en.wikipedia.org/wiki/Pascal_(programming_language)&#34;&gt;Pascal&lt;/a&gt; programming language. (I mentioned this in &lt;a href=&#34;../../blog/2011/10/25/rip-john-mccarthy-but-lisp-will-never-die/&#34;&gt;my previous article&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;I signed up for the class. You might wonder why, given that I had no interest in computers or programming (in Pascal or any other language). I had a perverse incentive. Advanced Placement courses were advertised as a way to get out of equivalent courses in college. I figured that if I ended up in college with a computing course requirement, I wanted to place out of it! So I signed up for Advanced Placement computer science because I &lt;em&gt;hated&lt;/em&gt; computers and wanted to get the pain over with earlier rather than later.&lt;/p&gt;

&lt;p&gt;The course was taught by a math teacher who made us use as a textbook a book that I found totally over my head, &lt;a href=&#34;http://www.amazon.com/Solve-Computer-Prentice-Hall-International-Science/dp/0134340019&#34;&gt;&amp;ldquo;How to Solve It by Computer&amp;rdquo;&lt;/a&gt;. I&amp;rsquo;m betting that if I had a copy of this book now to look at, I might actually enjoy it, but at the time, it was forbidding. It was all about &lt;a href=&#34;http://en.wikipedia.org/wiki/Loop_invariant&#34;&gt;loop invariants&lt;/a&gt;, proving your algorithms to be correct, etc.&lt;/p&gt;

&lt;p&gt;One side effect of the course was that pretty soon it became clear that it was the most time-consuming course. I simply did not have enough time in the computer lab to get my programs running correctly. I had my father buy me an Apple IIe computer so that I could do my coding and debugging at home into the wee hours of the night as necessary.&lt;/p&gt;

&lt;p&gt;I found it annoyingly difficult to get out of the BASIC and COBOL mindset into the &amp;ldquo;structured programming&amp;rdquo; enforced by Pascal. As a result, I am sensitive to the idea that &amp;ldquo;learning&amp;rdquo; inferior programming languages can genuinely get in the way of further progress as a programmer.&lt;/p&gt;

&lt;p&gt;I did not enjoy the class at all, but did enjoy the side effect of having a computer at home, which I used for playing some games as well as for word processing, so that I no longer needed to use a typewriter and scissors to work on drafts of papers.&lt;/p&gt;

&lt;p&gt;Again, I will admit that for much of the class, I was proceeding with no real understanding of what I was doing. I was copying and pasting and cargo-culting my way through the class, and through my receiving a 5 on the Advanced Placement exam. After this class, I thought I was done with programming for the rest of my life.&lt;/p&gt;

&lt;p&gt;The problem was that we never wrote any programs to do anything I found interesting, and was never exposed to the general possibilities of what we could do through programming. Writing a recursive program to generate fractals was not very interesting to me. My biggest project in the class was writing a program to maintain a library of books and be able to sort and search it and write it out to floppy disk and read it back in. That was also not very interesting to me.&lt;/p&gt;

&lt;h3 id=&#34;motivations&#34;&gt;Motivations&lt;/h3&gt;

&lt;p&gt;My hobbies at the time included playing chess, learning languages (I was enthusiastic about French and had taught myself Latin), reading lots of books. If the world had been different then, and someone had told me what I could do by knowing how to program, I could have been very interested. For example, suppose that the Web existed then. Suppose someone told me that by knowing how to program, I could write code to create my own flashcard system for learning languages. Then there would be a question of whether an application already exists for purchase that can do that. (It turns out that I have never been satisfied with any flashcard program I have used.)&lt;/p&gt;

&lt;p&gt;I think that to attract interest in computer programming, it is vital to give people reasons that they can relate to. And it is not helpful to &lt;em&gt;discourage&lt;/em&gt; potential programmers by telling them that they should be doing something else, like, just focusing on being a doctor or salesman, giving the argument that the &amp;ldquo;good&amp;rdquo; programmers are already doing their job creating applications ready to use, and that therefore &lt;a href=&#34;http://en.wikipedia.org/wiki/Comparative_advantage&#34;&gt;comparative advantage&lt;/a&gt; says that only professional programmers should learn how to program. This is like telling someone centuries ago that it is no use learning to read or write because others can already do it and probably do it much better. I think the proliferation of information means that more and more people need to be able to analyze it. Whether you call it &amp;ldquo;scripting&amp;rdquo; or &amp;ldquo;macros&amp;rdquo; or &amp;ldquo;customization&amp;rdquo;, the truth is that at some point, real programming is necessary in order to truly understand and control one&amp;rsquo;s data.&lt;/p&gt;

&lt;h2 id=&#34;after-11th-grade&#34;&gt;After 11th grade&lt;/h2&gt;

&lt;p&gt;The rest of the story, &lt;a href=&#34;../../blog/2011/10/25/rip-john-mccarthy-but-lisp-will-never-die/&#34;&gt;I already told earlier&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;My K-12 schooling did nothing to encourage me to actually understand and apply computer science and programming. I wonder to what extent the kind of experience I had still applies today in K-12.&lt;/p&gt;

&lt;h2 id=&#34;postscript&#34;&gt;Postscript&lt;/h2&gt;

&lt;p&gt;Upcoming topics I will write about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My eye-opening experience as a teaching assistant for an undergraduate computer science course.&lt;/li&gt;
&lt;li&gt;My current monitoring of Codecademy&amp;rsquo;s offerings and my ongoing efforts to teach my wife computer programming.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Global Day of CodeRetreat: Pittsburgh</title>
      <link>http://franklinchen.com/blog/2011/12/06/global-day-of-coderetreat-pittsburgh/</link>
      <pubDate>Tue, 06 Dec 2011 21:24:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2011/12/06/global-day-of-coderetreat-pittsburgh/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;../../blog/2011/12/04/why-i-am-writing-this-week-for-csedweek/&#34;&gt;on Sunday in introducing CSEdWeek&lt;/a&gt;, Saturday was the ambitious &lt;a href=&#34;http://blog.coderetreat.com/global-day-of-coderetreat&#34;&gt;Global Day of CodeRetreat&lt;/a&gt;, whose local &lt;a href=&#34;http://globalcoderetreat2011pittsburgh.eventbrite.com/&#34;&gt;Pittsburgh edition&lt;/a&gt; I participated in, with around 50 of us total. The global event was held simultaneously in 90 cities and had around 2000 attendees. I had a great time, although I was totally exhausted by the time it was over (it lasted from before 9 AM to after 6 PM; what a way to spend a Saturday!).&lt;/p&gt;

&lt;p&gt;What is CodeRetreat and what can you get out of it as a software developer?&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;../../images/global-day-of-coderetreat/code-retreat-start.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Pittsburgh CodeRetreat starting&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../../images/global-day-of-coderetreat/code-retreat-start-2.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Pittsburgh CodeRetreat starting&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-coderetreat-concept&#34;&gt;The CodeRetreat concept&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://coderetreat.org/&#34;&gt;CodeRetreat&lt;/a&gt; is the brainchild of &lt;a href=&#34;http://coreyhaines.com/&#34;&gt;Corey Haines&lt;/a&gt;. The motto is &amp;ldquo;Programmers honing their craft together.&amp;rdquo; The basic idea is the programmers gather for an all-day event in which they pair up with different partners for six sessions to work again and again on the same problem, starting from scratch each time. You can read about more &lt;a href=&#34;http://coderetreat.org/about&#34;&gt;formal details&lt;/a&gt;, but I didn&amp;rsquo;t before I went to the event, and in this post I will walk through my experience as a first-time participant.&lt;/p&gt;

&lt;p&gt;If CodeRetreat already sounds weird, it&amp;rsquo;s because it is. I had heard about it earlier from a couple of people I&amp;rsquo;d met at the &lt;a href=&#34;http://www.pghgeekoutday.com/&#34;&gt;Pittsburgh Geek Out Day&lt;/a&gt; sessions who had gone to such events in the past. To be completely honest, the first time I heard about it, it sounded weird. And the second time, after hearing about the session held in Pittsburgh in May when I was out of town, it sounded weird too.  But I&amp;rsquo;m the kind of person who is willing to try weird things if I don&amp;rsquo;t believe they can be actively harmful and have a chance of being very beneficial.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to state up front that if you are a programmer and haven&amp;rsquo;t been to a CodeRetreat, and one is happening in your area, you should try it out.&lt;/p&gt;

&lt;h2 id=&#34;morning-introduction&#34;&gt;Morning introduction&lt;/h2&gt;

&lt;p&gt;I arrived before 8:30 AM, in time for taking a seat at a table and doing some socializing over coffee and donuts/bagels.  &lt;strong&gt;Socializing is one of the big reasons to go to an event like this; I had never been in a room of fifty local developers from all kinds of domain and programming language backgrounds.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We were told that our task was to implement &lt;a href=&#34;http://en.wikipedia.org/wiki/Conway&#39;s_Game_of_Life&#34;&gt;Conway&amp;rsquo;s game of life&lt;/a&gt;. Actually, we all already knew that, because we had been informed before the event. To keep myself fresh for the event, I deliberately did no thinking about the problem, working on an algorithm, or coding it. I do not know how many other people took this attitude, and am curious how it affects the nature of participation (I will discuss some speculations later in this post).&lt;/p&gt;

&lt;h2 id=&#34;first-session&#34;&gt;First session&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t remember what specific instructions we were given for our first session, other than to pair up. I may have been too distracted by the socializing at the time. &lt;strong&gt;It would have been useful to have received handouts to guide us.&lt;/strong&gt; I do know that at some point in the morning, before the first or second session, we were directed to look at the whiteboard that had the &amp;ldquo;four rules of simple design&amp;rdquo; written on it:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../../images/global-day-of-coderetreat/four-rules-of-simple-design&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Four rules of simple design&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h3 id=&#34;four-rules-of-simple-design&#34;&gt;Four rules of simple design&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Passes all tests&lt;/li&gt;
&lt;li&gt;Clear, expressive, consistent&lt;/li&gt;
&lt;li&gt;Duplicates no behavior, config&lt;/li&gt;
&lt;li&gt;Minimal methods, classes, modules&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;my-first-pairing-experience&#34;&gt;My first pairing experience&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;d heard about &lt;a href=&#34;http://en.wikipedia.org/wiki/Pair_programming&#34;&gt;pair programming&lt;/a&gt; for a decade, in the context of &lt;a href=&#34;http://en.wikipedia.org/wiki/Extreme_programming&#34;&gt;Extreme Programming (XP)&lt;/a&gt;, but had never practiced it. To be honest, as late as a year ago I found the concept very strange and distasteful. Interestingly, by this year, as a result of participating in a lot of &lt;a href=&#34;../../blog/2011/10/16/pittsburgh-software-developer-communities/&#34;&gt;local programmer group meetings&lt;/a&gt;, I became more sociable generally and more amenable to real-time sharing of ideas.  &lt;strong&gt;Part of the reason I decided to go to CodeRetreat was to experience pairing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the first session, I paired with Adam, since I knew him (in fact, I had gotten him to register at the last minute for the event) and we could work together in Java.&lt;/p&gt;

&lt;p&gt;We gathered around his laptop, and spent quite a bit of time (of the allotted 45 minutes per session) sketching out a design for implementing Conway&amp;rsquo;s game of life. First we had to decide what variant of the game to implement: fixed grid with boundary or infinite? We decided on infinite. Then we had to figure out an appropriate algorithm and data representation. We came up with that. We ended up writing scaffolding for a complete application, for initializing the grid, displaying it, computing the next step, etc. Unfortunately, time expired when we were just about to implement the rules for the game.&lt;/p&gt;

&lt;p&gt;Then we were told to &lt;em&gt;delete all our code&lt;/em&gt;. That was kind of shocking. We weren&amp;rsquo;t allowed to just archive it somewhere. We had to delete it right there and then:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../../images/global-day-of-coderetreat/code-deleted&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;observations&#34;&gt;Observations&lt;/h3&gt;

&lt;p&gt;I was disappointed that we didn&amp;rsquo;t have something to show after 45 minutes. I was also shocked about having to delete our work. I felt that the infrastructure we had set up was valuable. I was confused by how what we were doing was contrary with how I would operate in real life on a real programming project. 45 minutes was not enough time to do the kinds of things I really wanted to do.&lt;/p&gt;

&lt;p&gt;Meanwhile, at some point I realized that we had violated the &amp;ldquo;rules of simple design&amp;rdquo;. We had a proliferation of interfaces and in fact we kept changing them in order to be able to compile while nearing something that could actually run.&lt;/p&gt;

&lt;h2 id=&#34;second-session&#34;&gt;Second session&lt;/h2&gt;

&lt;p&gt;I think that for the second session we were instructed to use &lt;a href=&#34;http://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;test-driven development&lt;/a&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../../images/global-day-of-coderetreat/tdd-cycle.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I looked for another Java programmer, and paired with Heath, whom I had met earlier in various events but never worked with. We had some ideas based on what we each had done in the first session and got going. This time, we used my laptop, and the first thing I did was start writing tests with &lt;a href=&#34;http://www.junit.org/&#34;&gt;JUnit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We made good progress, but I felt hampered by Java&amp;rsquo;s verbose syntax, and also I confess to copying and pasting test setup code just because time was short. I ended up feeling conflicted because the time constraints of this event were generating powerful perverse incentives. I think a lot of us kind of liked the idea of getting something working and done, and cut corners throughout the day. This is something that should be addressed by the CodeRetreat organizers and facilitators. After each session, many of us ended up saying, &amp;ldquo;We almost finished!&amp;rdquo; or something like that. I tried to resist having that mentality, but it was difficult given the time limit.&lt;/p&gt;

&lt;h2 id=&#34;third-session&#34;&gt;Third session&lt;/h2&gt;

&lt;p&gt;The final morning session had me pairing with a Python programmer, Joe.&lt;/p&gt;

&lt;p&gt;We were supposed to do &amp;ldquo;ping pong pairing&amp;rdquo;, which I hadn&amp;rsquo;t heard of before. The idea was to take turns being the one writing tests and being the one writing code to pass the tests.&lt;/p&gt;

&lt;p&gt;Joe and I wasted some time getting set up with Dropbox so that we could use both our laptops in order to get concurrency benefits.&lt;/p&gt;

&lt;p&gt;I started out writing tests using &lt;a href=&#34;http://docs.python.org/library/unittest.html&#34;&gt;unittest&lt;/a&gt; and Joe wrote the game implementation. It turned out we never actually ping-ponged, so we violated the intent of the session. We both got into the idea of being able to get something done. In particular, we agreed on a purely functional algorithm, which we knew would be expressible very compactly in Python.&lt;/p&gt;

&lt;p&gt;We ran into concurrency problems because we were perpetually editing source files such that I kept seeing an out of date version of his code and vice versa. &amp;ldquo;Concurrent&amp;rdquo; development using something like Git is one thing, but having one&amp;rsquo;s view of a project change underneath one&amp;rsquo;s feet is another. I don&amp;rsquo;t think the Dropbox idea worked so well, but a number of us that day independently came up with it and spread it around and used it. I now think that&amp;rsquo;s not only cheating, but it even further distances the situation from that of real life software development!&lt;/p&gt;

&lt;p&gt;Also, in the end, Joe had written a lot more code than we had tested, and I had written a lot more tests that were not yet passing. So I think the experiment didn&amp;rsquo;t work out well. We were not keeping to the TDD cycle we were supposed to keep to, in which a test is written, code is written to pass it, then another test written making the code fail, etc.&lt;/p&gt;

&lt;h2 id=&#34;lunch&#34;&gt;Lunch&lt;/h2&gt;

&lt;p&gt;For various reasons, we kept falling behind schedule in the morning, such that it was later than planned when we finally took a lunch break. We each got a nice box lunch, and I took a short nap before resuming more socialization and discussion, which was finally interrupted when we had to begin the afternoon sessions.&lt;/p&gt;

&lt;h2 id=&#34;fourth-session&#34;&gt;Fourth session&lt;/h2&gt;

&lt;p&gt;The fourth session was supposed to be &amp;ldquo;mute ping pong pairing with loophole&amp;rdquo;, in which we were not supposed to communicate except through code, and the one writing code to pass tests was supposed to be fiendish and write code that would pass the existing tests but would clearly not be the correct long-term code for the problem at hand.&lt;/p&gt;

&lt;p&gt;I paired with Chris, using Java, and we did the Dropbox thing. Unfortunately, we spent a large amount of time getting set up. We both had problems connecting to the WiFi for a while. Furthermore, we finally realized that two machines both running IntelliJ IDEA on the same project was a bad idea, because of clobbering of project state. I switched to Emacs, but then we had to rig up a script for me to be able to compile and run stuff he was generating in IntelliJ IDEA. There was just too much setup time wasted.&lt;/p&gt;

&lt;p&gt;Chris took up the test-writing duties and I proceeded to write code. This was my first time during the day to write code to pass someone else&amp;rsquo;s tests, so the experience was quite interesting. Thanks to static typing, the tests Chris wrote forced me to write various classes and methods. I did play the trick of writing degenerate code that passed one of his tests and forced him to write more tests.&lt;/p&gt;

&lt;p&gt;We ran out of time before we got to ping pong the roles. Oops. I did learn something from this &amp;ldquo;no talking about design up front&amp;rdquo; session though: tests can go a long way to drive and constrain the kinds of designs possible to solve a problem. And I was clearly not writing anything extra when focusing purely on passing the existing tests.&lt;/p&gt;

&lt;h2 id=&#34;fifth-session&#34;&gt;Fifth session&lt;/h2&gt;

&lt;p&gt;The fifth session was supposed to be &amp;ldquo;open&amp;rdquo; to however we wanted to go about implementing the game.&lt;/p&gt;

&lt;p&gt;I was paired with Demeng, who uses C#, which I have never used. It was not clear to me what we should do. Somehow, we ended up deciding to have me work on a Haskell implementation of a general design we discussed, so that he could watch and ask me questions and learn some Haskell in the process as I explained to him how to express something we wanted. Given that he was familiar with Python, I felt this was a feasible goal, and it was going quite well, actually. I would write a line of code and explain it to him, or he would tell me something to express, and I would write the code.&lt;/p&gt;

&lt;p&gt;Unfortunately, I was still not set up for production Haskell development, e.g., with a testing framework, so we had ad hoc tests.&lt;/p&gt;

&lt;h2 id=&#34;sixth-session&#34;&gt;Sixth session&lt;/h2&gt;

&lt;p&gt;The sixth session had each pair rotate to the right to work on someone&amp;rsquo;s machine and code from the fifth session.&lt;/p&gt;

&lt;p&gt;This was quite traumatic for some of us.&lt;/p&gt;

&lt;p&gt;Demeng and I got moved to a laptop with C# going. He took charge, but I felt somewhat helpless because I had to keep asking about various C# constructs, and also, the original programmers didn&amp;rsquo;t use a testing framework that made it easy to start looking at the existing tests and write more. Even worse, it was getting late and Demeng had to leave, so I was left alone trying to figure out what was going on.&lt;/p&gt;

&lt;p&gt;The pair who ended up with my Haskell code was in even worse shape. They didn&amp;rsquo;t know any Haskell, and were fairly confused and kept on asking me for help. They didn&amp;rsquo;t manage to write any code that compiled. I felt bad about having used Haskell in the fifth session without knowing that it was going to become a new pair&amp;rsquo;s legacy code!&lt;/p&gt;

&lt;h2 id=&#34;what-i-got-out-of-coderetreat&#34;&gt;What I got out of CodeRetreat&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m not sure I got what was &amp;ldquo;intended&amp;rdquo; out of CodeRetreat, if the intent was for us to rigorously follow the guidelines and rules we were given. There were too many perverse incentives and little enforcement. Also, the frictions of different languages, IDEs, and operating systems were sometimes significant.&lt;/p&gt;

&lt;p&gt;What I mostly got out of CodeRetreat was value at a meta-level. It was a time to socialize, to meet new people and even work with them. It was a time for many participants who had yet heard about TDD and various design principles to thinking about them and give them a try. It was a time to learn about other languages and development environments, even if only at a shallow level. It was a time for exploring different algorithms and data structures for the same problem.&lt;/p&gt;

&lt;p&gt;The most concrete thing I learned was that pairing can be very stimulating and useful. CodeRetreat has made me think that I can definitely imagine pairing as a regular work practice.&lt;/p&gt;

&lt;h3 id=&#34;education-and-cs-ed-week&#34;&gt;Education and CS Ed Week&lt;/h3&gt;

&lt;p&gt;Although I think less chaos and more guidance would improve CodeRetreat, something about the whole process of getting people together and making them share is in itself a great example of learning and teaching. I&amp;rsquo;d call CodeRetreat an example of &amp;ldquo;education&amp;rdquo;, even though it is far removed from the conventional lecture hall. Nobody leaves CodeRetreat with a huge set of additional facts in the brain, but I&amp;rsquo;m sure many of us leave having experienced a taste of many ideas, shared recommendations to appropriate books and web sites to examine and study, and notions of how to change our actual practices in the real world.&lt;/p&gt;

&lt;p&gt;What does any of this have to do with CS Ed Week? I think there is tension in the educational system between those who believe it should teach fundamental (usually meaning mathematical and abstract) foundations of computing, and those who believe that students should also be prepared for the messiness and realities of the &amp;ldquo;real world&amp;rdquo;. Meanwhile, a lot of the press concerning CS Ed Week focuses on very pragmatic arguments that the US badly needs more appropriately trained employees for computing jobs.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t see how it is possible to really attract more young people into computing without at least helping them understand what a career in computing might entail. That requires some kind of exposure to what we actually do. It&amp;rsquo;s not enough to just teach a middle school student some kid-friendly programming language, or to teach a vocational student Java, or to teach an undergrad the details of Fibonacci heaps. The big picture is missing.&lt;/p&gt;

&lt;p&gt;Events similar to CodeRetreat could play a role in getting a lot of people exposure to the big picture. Furthermore, even many of us who already work in computing do not see the big picture, because it is so easy to get out of date once out of school and working in some narrow niche. So &amp;ldquo;continuing education&amp;rdquo; is just as important as education at K-12 or in undergrad or grad school.&lt;/p&gt;

&lt;h2 id=&#34;concerns-about-coderetreat&#34;&gt;Concerns about CodeRetreat&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s not clear to me that Conway&amp;rsquo;s game of life is such a good topic. It&amp;rsquo;s not very much like typical programming tasks. In fact, my mind wandered toward thinking about clever ideas for preprocessing, compilation, parallelization, and memoization that I&amp;rsquo;m not sure I would want to work on with someone for 45 minutes. I brought up this concern at lunch but was told that the task always remains the same because it serves its purpose, it works, and consistency is important.&lt;/p&gt;

&lt;p&gt;There needs to be a way to help us resist perverse incentives to finish an app.&lt;/p&gt;

&lt;p&gt;We should be better prepared to cope with different languages and development environments.&lt;/p&gt;

&lt;h2 id=&#34;will-i-attend-the-next-coderetreat-in-pittsburgh&#34;&gt;Will I attend the next CodeRetreat in Pittsburgh?&lt;/h2&gt;

&lt;p&gt;I have to confess that I do not know whether I will decide it worthwhile to go to another one. It&amp;rsquo;s too early to think about that, although Jim Hurne has already set February 25 as the date for the next one! I still have to fully digest what I experienced, make use of it, and then think about how I would maximally benefit from and contribute to another CodeRetreat.&lt;/p&gt;

&lt;h2 id=&#34;thank-you&#34;&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;Thank you, Vivisimo and M*Modal, for being sponsors and hosts for the event.&lt;/p&gt;

&lt;p&gt;Thanks you, &lt;a href=&#34;http://twitter.com/jthurne&#34;&gt;Jim Hurne&lt;/a&gt;, for putting so much work into not only the Pittsburgh event, but more broadly, the global one.&lt;/p&gt;

&lt;p&gt;Thanks you, &lt;a href=&#34;http://twitter.com/coxandrew&#34;&gt;Andrew Cox&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/josephrkramer&#34;&gt;Joseph Kramer&lt;/a&gt;, for acting as facilitators all day  (Andrew has written up a detail account of his experience on Saturday as a &lt;a href=&#34;http://andrewcox.org/post/13810557640/coderetreat-a-first-time-facilitators-perspective&#34;&gt;facilitator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you, Adam, Heath, Joe, Chris, Demeng, for pairing with me.&lt;/p&gt;

&lt;p&gt;And thanks to everyone else who was at CodeRetreat.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why I am writing this week for CSEdWeek</title>
      <link>http://franklinchen.com/blog/2011/12/04/why-i-am-writing-this-week-for-csedweek/</link>
      <pubDate>Sun, 04 Dec 2011 20:54:00 +0000</pubDate>
      
      <guid>http://franklinchen.com/blog/2011/12/04/why-i-am-writing-this-week-for-csedweek/</guid>
      <description>&lt;figure &gt;
    
        &lt;img src=&#34;../../images/csedweek-2011.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Logo for CSEdWeek 2011&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;This week (December 4 through 10, 2011) has been designed as &lt;a href=&#34;http://www.csedweek.org/&#34;&gt;Computer Science Education Week (CSEDWeek)&lt;/a&gt; by the US House of Representatives to recognize the importance of computer science education for students at all levels.&lt;/p&gt;

&lt;p&gt;I am one of over 2000 people who have pledged online to participate in CSEdWeek. I will be blog about &lt;strong&gt;computation&lt;/strong&gt; and the &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;teaching&lt;/strong&gt; of it, in every context that I have experienced it.&lt;/p&gt;

&lt;p&gt;Let me start by raising some questions about what is at stake.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;

&lt;p&gt;What do you think of when you even hear of &amp;ldquo;Computer Science education&amp;rdquo;?  (I welcome comments below.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you imagine elementary schools equipped with iPads?&lt;/li&gt;
&lt;li&gt;Do you imagine courses about how to use applications such as Microsoft Word or Gmail?&lt;/li&gt;
&lt;li&gt;Do you imagine Advanced Placement courses spreading to every high school in the country, with high enrollments in the courses?&lt;/li&gt;
&lt;li&gt;Do you imagine community college and technical schools teaching something about programming in Visual Basic or Java?&lt;/li&gt;
&lt;li&gt;Do you imagine undergraduates learning about asymptotic mathematical analysis of parallel algorithms?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do not like the phrase &amp;ldquo;computer science&amp;rdquo;. Someone once said, computer science is not about &lt;strong&gt;computers&lt;/strong&gt; and is not &lt;strong&gt;science&lt;/strong&gt;. I heartily agree. The essence of what computers do is what is important, not the physical details of the what &lt;strong&gt;computes&lt;/strong&gt; or the very specific details of what applications have already been provided for use on a computer. And the principles of computation are just mathematics, which is not an empirical science.&lt;/p&gt;

&lt;p&gt;So right off the bat, I think there is a lot of opportunity for confusion when trying to determine what the scope of &amp;ldquo;computer science&amp;rdquo; is (versus programming, human-computer interaction, software engineering, psychology and politics of software development in the real world), what should be taught, to whom, and by whom.&lt;/p&gt;

&lt;p&gt;I especially dislike the word &amp;ldquo;education&amp;rdquo;. It often implies some formal degree program, tuition, certifications, and other such matters. I&amp;rsquo;m interested in the &lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;teaching&lt;/strong&gt;, not in the &lt;strong&gt;student&lt;/strong&gt; or &lt;strong&gt;teacher&lt;/strong&gt; or &lt;strong&gt;school&lt;/strong&gt; part of the story.&lt;/p&gt;

&lt;h2 id=&#34;learning-and-teaching-outside-of-school&#34;&gt;Learning and teaching outside of school&lt;/h2&gt;

&lt;p&gt;Later this week I will write about how various experiences in school turned me off from computers, from computing, and offer suggestions on how to fix the problem of discouraging young people from pursuing a computing-oriented learning and career path.&lt;/p&gt;

&lt;p&gt;But today, I just want to mention a remarkable event that occurred just yesterday, the &lt;a href=&#34;http://blog.coderetreat.com/global-day-of-coderetreat&#34;&gt;Global Day of CodeRetreat&lt;/a&gt;, held simultaneously in 90 cities with around 2000 attendees. I participated in the local &lt;a href=&#34;http://globalcoderetreat2011pittsburgh.eventbrite.com/&#34;&gt;Pittsburgh edition&lt;/a&gt; of the event.  (I will write later this week in detail about my experience at the event.)&lt;/p&gt;

&lt;p&gt;The motto of the event is &amp;ldquo;Programmers honing their craft together.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The buzzwords used here are very far from those in academic &amp;ldquo;computer science&amp;rdquo;. I bring up the event because I think that one thing that is entirely missing in the discussion of &amp;ldquo;computer science education&amp;rdquo; is, what is really important and valuable to society, and who provides it, and where?  It is fashionable in academia to look down on anything that would speak of &amp;ldquo;programmers&amp;rdquo; (rather than &amp;ldquo;computer scientists&amp;rdquo;), &amp;ldquo;honing&amp;rdquo; (rather than &amp;ldquo;proving&amp;rdquo;), &amp;ldquo;craft&amp;rdquo; (rather than &amp;ldquo;science&amp;rdquo;), and &amp;ldquo;together&amp;rdquo; (conventional education pays only lip service to the importance of collaboration).&lt;/p&gt;

&lt;p&gt;I believe that something like CodeRetreat is fair game for discussion during CSEdWeek, because the enthusiastic participation in this event speaks to the passionate desire by volunteers to help people learn, and by working software developers to continue to improve themselves.&lt;/p&gt;

&lt;h2 id=&#34;stay-tuned&#34;&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;Stay tuned for posts later this week on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;problems I faced in computer science education in K-12, college&lt;/li&gt;
&lt;li&gt;CodeRetreat and what people learn there&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>